{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\genil\\\\Desktop\\\\sistema da imperio\\\\src\\\\components\\\\VideoPlayer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { videoService } from '../lib/supabase';\nimport VideoSidebar from './VideoSidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoPlayer = ({\n  videoId,\n  onEnded,\n  autoplay = false,\n  isPlaying = false,\n  setIsPlaying = () => {},\n  shouldAutoplay = false\n}) => {\n  _s();\n  var _videos$2;\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      autoplay: autoplay ? 1 : 0,\n      controls: 1,\n      rel: 0\n    }\n  };\n  const [videos, setVideos] = useState([]);\n  const [newVideoUrl, setNewVideoUrl] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [isPlayerReady, setIsPlayerReady] = useState(false);\n  const [localIsPlaying, setLocalIsPlaying] = useState(isPlaying);\n  useEffect(() => {\n    setLocalIsPlaying(isPlaying);\n  }, [isPlaying]);\n  const updatePlayingState = state => {\n    setLocalIsPlaying(state);\n    setIsPlaying(state);\n  };\n  useEffect(() => {\n    loadVideos();\n  }, []);\n  const loadYouTubeAPI = () => {\n    return new Promise(resolve => {\n      var _firstScriptTag$paren;\n      const existingScript = document.querySelector('script[src=\"https://www.youtube.com/iframe_api\"]');\n      if (existingScript) {\n        if (window.YT && window.YT.Player) {\n          resolve();\n          return;\n        }\n      }\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.async = true;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      (_firstScriptTag$paren = firstScriptTag.parentNode) === null || _firstScriptTag$paren === void 0 ? void 0 : _firstScriptTag$paren.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        resolve();\n      };\n    });\n  };\n  const initializePlayer = async (videoId, shouldAutoplay = false) => {\n    try {\n      var _YT;\n      await loadYouTubeAPI();\n      if (!((_YT = window.YT) !== null && _YT !== void 0 && _YT.Player)) {\n        setError('API do YouTube não está disponível');\n        return null;\n      }\n      if (player) {\n        try {\n          player.destroy();\n        } catch (e) {\n          console.error('Erro ao destruir player existente:', e);\n        }\n        setPlayer(null);\n      }\n      const playerContainer = document.getElementById('youtube-player');\n      if (!playerContainer) {\n        setError('Container do player não encontrado');\n        return null;\n      }\n\n      // Limpa o container antes de criar um novo player\n      while (playerContainer.firstChild) {\n        playerContainer.removeChild(playerContainer.firstChild);\n      }\n      const newPlayer = new window.YT.Player('youtube-player', {\n        height: '100%',\n        width: '100%',\n        videoId: videoId,\n        playerVars: {\n          autoplay: shouldAutoplay ? 1 : 0,\n          controls: 1,\n          rel: 0\n        },\n        events: {\n          onReady: () => {\n            setIsPlayerReady(true);\n            if (shouldAutoplay) {\n              try {\n                newPlayer.playVideo();\n                updatePlayingState(true);\n              } catch (error) {\n                console.error('Erro ao iniciar reprodução:', error);\n                updatePlayingState(false);\n              }\n            }\n          },\n          onStateChange: event => {\n            try {\n              if (event.data === window.YT.PlayerState.ENDED) {\n                updatePlayingState(false);\n                onEnded === null || onEnded === void 0 ? void 0 : onEnded();\n              } else if (event.data === window.YT.PlayerState.PLAYING) {\n                updatePlayingState(true);\n              } else if (event.data === window.YT.PlayerState.PAUSED) {\n                updatePlayingState(false);\n              }\n            } catch (error) {\n              console.error('Erro ao processar mudança de estado:', error);\n              updatePlayingState(false);\n            }\n          },\n          onError: error => {\n            console.error('Erro no player do YouTube:', error);\n            setError('Erro ao carregar o vídeo');\n            updatePlayingState(false);\n          }\n        }\n      });\n      setPlayer(newPlayer);\n      return newPlayer;\n    } catch (error) {\n      console.error('Erro ao inicializar player:', error);\n      setError('Erro ao inicializar o player de vídeo');\n      updatePlayingState(false);\n      return null;\n    }\n  };\n  useEffect(() => {\n    if (selectedVideo || videos[0]) {\n      var _videos$;\n      const videoId = extractVideoId((selectedVideo === null || selectedVideo === void 0 ? void 0 : selectedVideo.url) || ((_videos$ = videos[0]) === null || _videos$ === void 0 ? void 0 : _videos$.url));\n      if (videoId) {\n        initializePlayer(videoId, shouldAutoplay);\n      }\n    }\n    return () => {\n      if (player) {\n        try {\n          player.destroy();\n          setPlayer(null);\n          setIsPlayerReady(false);\n        } catch (error) {\n          console.error('Erro ao destruir player:', error);\n        }\n      }\n    };\n  }, [selectedVideo === null || selectedVideo === void 0 ? void 0 : selectedVideo.url, (_videos$2 = videos[0]) === null || _videos$2 === void 0 ? void 0 : _videos$2.url]);\n  const loadVideos = async () => {\n    try {\n      const data = await videoService.getRecentVideos();\n      setVideos(data);\n    } catch (error) {\n      console.error('Erro ao carregar vídeos:', error);\n    }\n  };\n\n  // Função para converter URL do YouTube em formato embed\n  const getEmbedUrl = url => {\n    console.log('URL original:', url);\n    try {\n      if (url.includes('youtube.com') || url.includes('youtu.be')) {\n        var _url$split$, _url$split$2;\n        const videoId = url.includes('youtube.com') ? (_url$split$ = url.split('v=')[1]) === null || _url$split$ === void 0 ? void 0 : _url$split$.split('&')[0] : (_url$split$2 = url.split('youtu.be/')[1]) === null || _url$split$2 === void 0 ? void 0 : _url$split$2.split('?')[0];\n        const embedUrl = `https://www.youtube.com/embed/${videoId}`;\n        console.log('URL convertida:', embedUrl);\n        return embedUrl;\n      }\n      if (url.includes('vimeo.com')) {\n        var _url$split$3;\n        const videoId = (_url$split$3 = url.split('vimeo.com/')[1]) === null || _url$split$3 === void 0 ? void 0 : _url$split$3.split('?')[0];\n        const embedUrl = `https://player.vimeo.com/video/${videoId}`;\n        console.log('URL convertida:', embedUrl);\n        return embedUrl;\n      }\n      return url;\n    } catch (error) {\n      console.error('Erro ao processar URL:', error);\n      return url;\n    }\n  };\n\n  // Função para extrair título do vídeo do YouTube\n  const getVideoTitle = async url => {\n    try {\n      if (url.includes('youtube.com') || url.includes('youtu.be')) {\n        var _url$split$4, _url$split$5, _data$items$, _data$items$$snippet;\n        const videoId = url.includes('youtube.com') ? (_url$split$4 = url.split('v=')[1]) === null || _url$split$4 === void 0 ? void 0 : _url$split$4.split('&')[0] : (_url$split$5 = url.split('youtu.be/')[1]) === null || _url$split$5 === void 0 ? void 0 : _url$split$5.split('?')[0];\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=AIzaSyAyTc_jYQSVM_3kg95t8ai3CWckZGG0v4c&part=snippet`);\n        const data = await response.json();\n        if (data.error) {\n          console.error('Erro da API do YouTube:', data.error);\n          return 'Vídeo do YouTube';\n        }\n        return ((_data$items$ = data.items[0]) === null || _data$items$ === void 0 ? void 0 : (_data$items$$snippet = _data$items$.snippet) === null || _data$items$$snippet === void 0 ? void 0 : _data$items$$snippet.title) || 'Vídeo do YouTube';\n      }\n      if (url.includes('vimeo.com')) {\n        var _url$split$6, _data$;\n        const videoId = (_url$split$6 = url.split('vimeo.com/')[1]) === null || _url$split$6 === void 0 ? void 0 : _url$split$6.split('?')[0];\n        const response = await fetch(`https://vimeo.com/api/v2/video/${videoId}.json`);\n        const data = await response.json();\n        return ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.title) || 'Vídeo do Vimeo';\n      }\n      return 'Vídeo';\n    } catch (error) {\n      console.error('Erro ao obter título do vídeo:', error);\n      return 'Vídeo';\n    }\n  };\n  const handleAddVideo = async e => {\n    if (e) e.preventDefault();\n    setError('');\n    setIsLoading(true);\n    if (!newVideoUrl.trim()) {\n      setError('Por favor, insira uma URL válida');\n      setIsLoading(false);\n      return;\n    }\n    try {\n      const embedUrl = getEmbedUrl(newVideoUrl);\n      const videoTitle = await getVideoTitle(newVideoUrl);\n      const newVideo = await videoService.addVideo(embedUrl, videoTitle);\n      setVideos(prev => [newVideo, ...prev]);\n      setNewVideoUrl('');\n      setSelectedVideo(newVideo);\n    } catch (error) {\n      console.error('Erro detalhado:', error);\n      setError(error.message || error.error_description || 'Erro ao adicionar vídeo. Verifique se a URL é válida.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleDelete = async videoId => {\n    try {\n      await videoService.deleteVideo(videoId);\n      setVideos(prev => prev.filter(video => video.id !== videoId));\n    } catch (error) {\n      console.error('Erro ao deletar vídeo:', error);\n    }\n  };\n  const handleVideoSelect = async (video, shouldAutoplay = false) => {\n    try {\n      console.log('handleVideoSelect chamado com autoplay:', shouldAutoplay);\n      const videoId = extractVideoId(video.url);\n      if (!videoId) {\n        console.error('VideoId não encontrado para:', video.url);\n        return;\n      }\n      if (player && isPlayerReady) {\n        console.log('Player existente, carregando novo vídeo');\n        try {\n          player.loadVideoById({\n            videoId: videoId,\n            startSeconds: 0,\n            suggestedQuality: 'large'\n          });\n          if (shouldAutoplay) {\n            console.log('Iniciando reprodução com player existente');\n            player.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao carregar vídeo:', e);\n        }\n      } else {\n        console.log('Inicializando novo player');\n        try {\n          const newPlayer = await initializePlayer(videoId, true);\n          if (newPlayer) {\n            console.log('Novo player criado, iniciando reprodução');\n            newPlayer.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao inicializar novo player:', e);\n        }\n      }\n    } catch (error) {\n      console.error('Erro em handleVideoSelect:', error);\n    }\n  };\n  const handlePlayerReady = (event, shouldAutoplay = false) => {\n    try {\n      console.log('Player pronto, shouldAutoplay:', shouldAutoplay);\n      const newPlayer = event.target;\n      setPlayer(newPlayer);\n      setIsPlayerReady(true);\n      if (shouldAutoplay) {\n        console.log('Iniciando reprodução automática');\n        newPlayer.playVideo();\n        updatePlayingState(true);\n      }\n    } catch (error) {\n      console.error('Erro em handlePlayerReady:', error);\n    }\n  };\n  const handleStateChange = event => {\n    if (event.data === 0) {\n      // vídeo terminou\n      updatePlayingState(false);\n      window.dispatchEvent(new Event('externalMediaStop'));\n      onEnded === null || onEnded === void 0 ? void 0 : onEnded();\n    } else if (event.data === 1) {\n      // vídeo começou a tocar\n      updatePlayingState(true);\n      window.dispatchEvent(new Event('externalMediaPlay'));\n    } else if (event.data === 2) {\n      // vídeo foi pausado\n      updatePlayingState(false);\n      window.dispatchEvent(new Event('externalMediaStop'));\n    }\n  };\n\n  // Função para extrair videoId do YouTube\n  const extractVideoId = (url = '') => {\n    try {\n      if (!url) return '';\n      let videoId = '';\n      if (url.includes('youtube.com/embed/')) {\n        var _url$split$7;\n        videoId = (_url$split$7 = url.split('embed/')[1]) === null || _url$split$7 === void 0 ? void 0 : _url$split$7.split('?')[0];\n      } else if (url.includes('youtube.com/watch')) {\n        var _url$split$8;\n        videoId = (_url$split$8 = url.split('v=')[1]) === null || _url$split$8 === void 0 ? void 0 : _url$split$8.split('&')[0];\n      } else if (url.includes('youtu.be/')) {\n        var _url$split$9;\n        videoId = (_url$split$9 = url.split('youtu.be/')[1]) === null || _url$split$9 === void 0 ? void 0 : _url$split$9.split('?')[0];\n      }\n      console.log('Extraído videoId:', videoId, 'da URL:', url);\n      return videoId;\n    } catch (error) {\n      console.error('Erro ao extrair videoId:', error);\n      return '';\n    }\n  };\n\n  // Adicione esta função para controlar o fade do volume do iframe\n  const fadeIframeVolume = (start, end, duration) => {\n    if (!player || !isPlayerReady) return;\n    const steps = 20;\n    const stepValue = (end - start) / steps;\n    const stepDuration = duration / steps;\n    let currentStep = 0;\n    const fadeInterval = setInterval(() => {\n      currentStep++;\n      const newVolume = start + stepValue * currentStep;\n      const volume = Math.min(Math.max(newVolume, 0), 1) * 100;\n      player.setVolume(volume);\n      if (currentStep >= steps) {\n        clearInterval(fadeInterval);\n      }\n    }, stepDuration);\n  };\n\n  // Adicione este useEffect para escutar eventos de áudio\n  useEffect(() => {\n    const handleAudioPlay = () => {\n      if (isPlayerReady) {\n        fadeIframeVolume(1, 0.10, 500);\n      }\n    };\n    const handleAudioStop = () => {\n      if (isPlayerReady) {\n        fadeIframeVolume(0.10, 1, 500);\n      }\n    };\n    window.addEventListener('audioPlay', handleAudioPlay);\n    window.addEventListener('audioStop', handleAudioStop);\n    return () => {\n      window.removeEventListener('audioPlay', handleAudioPlay);\n      window.removeEventListener('audioStop', handleAudioStop);\n    };\n  }, [isPlayerReady]);\n\n  // Adicione este useEffect para monitorar mudanças no selectedVideo\n  useEffect(() => {\n    if (selectedVideo) {\n      const videoId = extractVideoId(selectedVideo.url);\n      if (videoId) {\n        console.log('Detectada mudança no selectedVideo, iniciando com autoplay');\n        handleVideoSelect(selectedVideo, true);\n      }\n    }\n  }, [selectedVideo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-[#1e1e1e] text-gray-300 rounded-lg shadow-lg p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddVideo,\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"url\",\n          value: newVideoUrl,\n          onChange: e => setNewVideoUrl(e.target.value),\n          placeholder: \"Cole a URL do YouTube ou Vimeo aqui\",\n          className: \"w-full bg-[#2d2d2d] border border-[#404040] text-gray-200 rounded px-3 py-2 focus:border-[#e1aa1e] focus:outline-none\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-400 text-sm\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => handleAddVideo(),\n        className: `flex-1 ${isLoading ? 'bg-[#e1aa1e]/50 cursor-not-allowed' : 'bg-[#e1aa1e] hover:bg-[#e1aa1e]/80'} text-gray-900 px-3 py-1.5 rounded transition-colors flex items-center justify-center gap-2`,\n        disabled: isLoading,\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"w-4 h-4\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M12 4v16m8-8H4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this), isLoading ? 'Adicionando...' : 'Buscar Vídeo']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => setIsSidebarOpen(true),\n        className: \"flex-1 bg-[#2d2d2d] hover:bg-[#404040] border border-[#404040] text-[#e1aa1e] px-3 py-1.5 rounded flex items-center justify-center gap-2 transition-colors\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"w-4 h-4\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M4 6h16M4 12h16M4 18h16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), \"\\xDAltimos V\\xEDdeos\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-lg overflow-hidden border border-[#404040]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative pt-[56.25%]\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"youtube-player\",\n            className: \"absolute top-0 left-0 w-full h-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoSidebar, {\n      isOpen: isSidebarOpen,\n      onClose: () => setIsSidebarOpen(false),\n      videos: videos,\n      onVideoSelect: handleVideoSelect,\n      setIsPlaying: setIsPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 447,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"qCupjV0dpeg/Nc2GHuDOFOFe6aQ=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useEffect","videoService","VideoSidebar","jsxDEV","_jsxDEV","VideoPlayer","videoId","onEnded","autoplay","isPlaying","setIsPlaying","shouldAutoplay","_s","_videos$2","opts","height","width","playerVars","controls","rel","videos","setVideos","newVideoUrl","setNewVideoUrl","error","setError","isLoading","setIsLoading","isSidebarOpen","setIsSidebarOpen","selectedVideo","setSelectedVideo","player","setPlayer","isPlayerReady","setIsPlayerReady","localIsPlaying","setLocalIsPlaying","updatePlayingState","state","loadVideos","loadYouTubeAPI","Promise","resolve","_firstScriptTag$paren","existingScript","document","querySelector","window","YT","Player","tag","createElement","src","async","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","initializePlayer","_YT","destroy","e","console","playerContainer","getElementById","firstChild","removeChild","newPlayer","events","onReady","playVideo","onStateChange","event","data","PlayerState","ENDED","PLAYING","PAUSED","onError","_videos$","extractVideoId","url","getRecentVideos","getEmbedUrl","log","includes","_url$split$","_url$split$2","split","embedUrl","_url$split$3","getVideoTitle","_url$split$4","_url$split$5","_data$items$","_data$items$$snippet","response","fetch","json","items","snippet","title","_url$split$6","_data$","handleAddVideo","preventDefault","trim","videoTitle","newVideo","addVideo","prev","message","error_description","handleDelete","deleteVideo","filter","video","id","handleVideoSelect","loadVideoById","startSeconds","suggestedQuality","handlePlayerReady","target","handleStateChange","dispatchEvent","Event","_url$split$7","_url$split$8","_url$split$9","fadeIframeVolume","start","end","duration","steps","stepValue","stepDuration","currentStep","fadeInterval","setInterval","newVolume","volume","Math","min","max","setVolume","clearInterval","handleAudioPlay","handleAudioStop","addEventListener","removeEventListener","className","children","onSubmit","type","value","onChange","placeholder","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","isOpen","onClose","onVideoSelect","_c","$RefreshReg$"],"sources":["C:/Users/genil/Desktop/sistema da imperio/src/components/VideoPlayer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { videoService, VideoData } from '../lib/supabase';\nimport VideoSidebar from './VideoSidebar';\n\ninterface VideoPlayerProps {\n  videoId: string;\n  onEnded?: () => void;\n  autoplay?: boolean;\n  isPlaying?: boolean;\n  setIsPlaying?: (playing: boolean) => void;\n  shouldAutoplay?: boolean;\n}\n\nexport const VideoPlayer: React.FC<VideoPlayerProps> = ({ \n  videoId, \n  onEnded,\n  autoplay = false,\n  isPlaying = false,\n  setIsPlaying = () => {},\n  shouldAutoplay = false\n}) => {\n  const opts = {\n    height: '100%',\n    width: '100%',\n    playerVars: {\n      autoplay: autoplay ? 1 : 0,\n      controls: 1,\n      rel: 0,\n    },\n  };\n\n  const [videos, setVideos] = useState<VideoData[]>([]);\n  const [newVideoUrl, setNewVideoUrl] = useState('');\n  const [error, setError] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState<VideoData | null>(null);\n  const [player, setPlayer] = useState<any>(null);\n  const [isPlayerReady, setIsPlayerReady] = useState(false);\n  const [localIsPlaying, setLocalIsPlaying] = useState(isPlaying);\n\n  useEffect(() => {\n    setLocalIsPlaying(isPlaying);\n  }, [isPlaying]);\n\n  const updatePlayingState = (state: boolean) => {\n    setLocalIsPlaying(state);\n    setIsPlaying(state);\n  };\n\n  useEffect(() => {\n    loadVideos();\n  }, []);\n\n  const loadYouTubeAPI = () => {\n    return new Promise<void>((resolve) => {\n      const existingScript = document.querySelector('script[src=\"https://www.youtube.com/iframe_api\"]');\n      if (existingScript) {\n        if ((window as any).YT && (window as any).YT.Player) {\n          resolve();\n          return;\n        }\n      }\n\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.async = true;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag);\n\n      (window as any).onYouTubeIframeAPIReady = () => {\n        resolve();\n      };\n    });\n  };\n\n  const initializePlayer = async (videoId?: string, shouldAutoplay: boolean = false) => {\n    try {\n      await loadYouTubeAPI();\n      \n      if (!(window as any).YT?.Player) {\n        setError('API do YouTube não está disponível');\n        return null;\n      }\n\n      if (player) {\n        try {\n          player.destroy();\n        } catch (e) {\n          console.error('Erro ao destruir player existente:', e);\n        }\n        setPlayer(null);\n      }\n\n      const playerContainer = document.getElementById('youtube-player');\n      if (!playerContainer) {\n        setError('Container do player não encontrado');\n        return null;\n      }\n\n      // Limpa o container antes de criar um novo player\n      while (playerContainer.firstChild) {\n        playerContainer.removeChild(playerContainer.firstChild);\n      }\n\n      const newPlayer = new (window as any).YT.Player('youtube-player', {\n        height: '100%',\n        width: '100%',\n        videoId: videoId,\n        playerVars: {\n          autoplay: shouldAutoplay ? 1 : 0,\n          controls: 1,\n          rel: 0,\n        },\n        events: {\n          onReady: () => {\n            setIsPlayerReady(true);\n            if (shouldAutoplay) {\n              try {\n                newPlayer.playVideo();\n                updatePlayingState(true);\n              } catch (error) {\n                console.error('Erro ao iniciar reprodução:', error);\n                updatePlayingState(false);\n              }\n            }\n          },\n          onStateChange: (event: any) => {\n            try {\n              if (event.data === (window as any).YT.PlayerState.ENDED) {\n                updatePlayingState(false);\n                onEnded?.();\n              } else if (event.data === (window as any).YT.PlayerState.PLAYING) {\n                updatePlayingState(true);\n              } else if (event.data === (window as any).YT.PlayerState.PAUSED) {\n                updatePlayingState(false);\n              }\n            } catch (error) {\n              console.error('Erro ao processar mudança de estado:', error);\n              updatePlayingState(false);\n            }\n          },\n          onError: (error: any) => {\n            console.error('Erro no player do YouTube:', error);\n            setError('Erro ao carregar o vídeo');\n            updatePlayingState(false);\n          }\n        }\n      });\n\n      setPlayer(newPlayer);\n      return newPlayer;\n    } catch (error) {\n      console.error('Erro ao inicializar player:', error);\n      setError('Erro ao inicializar o player de vídeo');\n      updatePlayingState(false);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    if (selectedVideo || videos[0]) {\n      const videoId = extractVideoId(selectedVideo?.url || videos[0]?.url);\n      if (videoId) {\n        initializePlayer(videoId, shouldAutoplay);\n      }\n    }\n\n    return () => {\n      if (player) {\n        try {\n          player.destroy();\n          setPlayer(null);\n          setIsPlayerReady(false);\n        } catch (error) {\n          console.error('Erro ao destruir player:', error);\n        }\n      }\n    };\n  }, [selectedVideo?.url, videos[0]?.url]);\n\n  const loadVideos = async () => {\n    try {\n      const data = await videoService.getRecentVideos();\n      setVideos(data);\n    } catch (error) {\n      console.error('Erro ao carregar vídeos:', error);\n    }\n  };\n\n  // Função para converter URL do YouTube em formato embed\n  const getEmbedUrl = (url: string) => {\n    console.log('URL original:', url);\n    try {\n      if (url.includes('youtube.com') || url.includes('youtu.be')) {\n        const videoId = url.includes('youtube.com') \n          ? url.split('v=')[1]?.split('&')[0]\n          : url.split('youtu.be/')[1]?.split('?')[0];\n        \n        const embedUrl = `https://www.youtube.com/embed/${videoId}`;\n        console.log('URL convertida:', embedUrl);\n        return embedUrl;\n      }\n      if (url.includes('vimeo.com')) {\n        const videoId = url.split('vimeo.com/')[1]?.split('?')[0];\n        const embedUrl = `https://player.vimeo.com/video/${videoId}`;\n        console.log('URL convertida:', embedUrl);\n        return embedUrl;\n      }\n      return url;\n    } catch (error) {\n      console.error('Erro ao processar URL:', error);\n      return url;\n    }\n  };\n\n  // Função para extrair título do vídeo do YouTube\n  const getVideoTitle = async (url: string): Promise<string> => {\n    try {\n      if (url.includes('youtube.com') || url.includes('youtu.be')) {\n        const videoId = url.includes('youtube.com')\n          ? url.split('v=')[1]?.split('&')[0]\n          : url.split('youtu.be/')[1]?.split('?')[0];\n        \n        const response = await fetch(\n          `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=AIzaSyAyTc_jYQSVM_3kg95t8ai3CWckZGG0v4c&part=snippet`\n        );\n        const data = await response.json();\n        \n        if (data.error) {\n          console.error('Erro da API do YouTube:', data.error);\n          return 'Vídeo do YouTube';\n        }\n\n        return data.items[0]?.snippet?.title || 'Vídeo do YouTube';\n      }\n      \n      if (url.includes('vimeo.com')) {\n        const videoId = url.split('vimeo.com/')[1]?.split('?')[0];\n        const response = await fetch(`https://vimeo.com/api/v2/video/${videoId}.json`);\n        const data = await response.json();\n        return data[0]?.title || 'Vídeo do Vimeo';\n      }\n      \n      return 'Vídeo';\n    } catch (error) {\n      console.error('Erro ao obter título do vídeo:', error);\n      return 'Vídeo';\n    }\n  };\n\n  const handleAddVideo = async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    setError('');\n    setIsLoading(true);\n    \n    if (!newVideoUrl.trim()) {\n      setError('Por favor, insira uma URL válida');\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const embedUrl = getEmbedUrl(newVideoUrl);\n      const videoTitle = await getVideoTitle(newVideoUrl);\n      \n      const newVideo = await videoService.addVideo(embedUrl, videoTitle);\n      setVideos(prev => [newVideo, ...prev]);\n      setNewVideoUrl('');\n      setSelectedVideo(newVideo);\n    } catch (error: any) {\n      console.error('Erro detalhado:', error);\n      setError(\n        error.message || \n        error.error_description || \n        'Erro ao adicionar vídeo. Verifique se a URL é válida.'\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async (videoId: string) => {\n    try {\n      await videoService.deleteVideo(videoId);\n      setVideos(prev => prev.filter(video => video.id !== videoId));\n    } catch (error) {\n      console.error('Erro ao deletar vídeo:', error);\n    }\n  };\n\n  const handleVideoSelect = async (video: VideoData, shouldAutoplay: boolean = false) => {\n    try {\n      console.log('handleVideoSelect chamado com autoplay:', shouldAutoplay);\n      \n      const videoId = extractVideoId(video.url);\n      if (!videoId) {\n        console.error('VideoId não encontrado para:', video.url);\n        return;\n      }\n\n      if (player && isPlayerReady) {\n        console.log('Player existente, carregando novo vídeo');\n        try {\n          player.loadVideoById({\n            videoId: videoId,\n            startSeconds: 0,\n            suggestedQuality: 'large'\n          });\n          \n          if (shouldAutoplay) {\n            console.log('Iniciando reprodução com player existente');\n            player.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao carregar vídeo:', e);\n        }\n      } else {\n        console.log('Inicializando novo player');\n        try {\n          const newPlayer = await initializePlayer(videoId, true);\n          if (newPlayer) {\n            console.log('Novo player criado, iniciando reprodução');\n            newPlayer.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao inicializar novo player:', e);\n        }\n      }\n    } catch (error) {\n      console.error('Erro em handleVideoSelect:', error);\n    }\n  };\n\n  const handlePlayerReady = (event: any, shouldAutoplay: boolean = false) => {\n    try {\n      console.log('Player pronto, shouldAutoplay:', shouldAutoplay);\n      const newPlayer = event.target;\n      setPlayer(newPlayer);\n      setIsPlayerReady(true);\n      \n      if (shouldAutoplay) {\n        console.log('Iniciando reprodução automática');\n        newPlayer.playVideo();\n        updatePlayingState(true);\n      }\n    } catch (error) {\n      console.error('Erro em handlePlayerReady:', error);\n    }\n  };\n\n  const handleStateChange = (event: any) => {\n    if (event.data === 0) { // vídeo terminou\n      updatePlayingState(false);\n      window.dispatchEvent(new Event('externalMediaStop'));\n      onEnded?.();\n    } else if (event.data === 1) { // vídeo começou a tocar\n      updatePlayingState(true);\n      window.dispatchEvent(new Event('externalMediaPlay'));\n    } else if (event.data === 2) { // vídeo foi pausado\n      updatePlayingState(false);\n      window.dispatchEvent(new Event('externalMediaStop'));\n    }\n  };\n\n  // Função para extrair videoId do YouTube\n  const extractVideoId = (url: string = '') => {\n    try {\n      if (!url) return '';\n      \n      let videoId = '';\n      \n      if (url.includes('youtube.com/embed/')) {\n        videoId = url.split('embed/')[1]?.split('?')[0];\n      } else if (url.includes('youtube.com/watch')) {\n        videoId = url.split('v=')[1]?.split('&')[0];\n      } else if (url.includes('youtu.be/')) {\n        videoId = url.split('youtu.be/')[1]?.split('?')[0];\n      }\n\n      console.log('Extraído videoId:', videoId, 'da URL:', url);\n      return videoId;\n    } catch (error) {\n      console.error('Erro ao extrair videoId:', error);\n      return '';\n    }\n  };\n\n  // Adicione esta função para controlar o fade do volume do iframe\n  const fadeIframeVolume = (start: number, end: number, duration: number) => {\n    if (!player || !isPlayerReady) return;\n\n    const steps = 20;\n    const stepValue = (end - start) / steps;\n    const stepDuration = duration / steps;\n    let currentStep = 0;\n\n    const fadeInterval = setInterval(() => {\n      currentStep++;\n      const newVolume = start + (stepValue * currentStep);\n      const volume = Math.min(Math.max(newVolume, 0), 1) * 100;\n      player.setVolume(volume);\n\n      if (currentStep >= steps) {\n        clearInterval(fadeInterval);\n      }\n    }, stepDuration);\n  };\n\n  // Adicione este useEffect para escutar eventos de áudio\n  useEffect(() => {\n    const handleAudioPlay = () => {\n      if (isPlayerReady) {\n        fadeIframeVolume(1, 0.10, 500);\n      }\n    };\n\n    const handleAudioStop = () => {\n      if (isPlayerReady) {\n        fadeIframeVolume(0.10, 1, 500);\n      }\n    };\n\n    window.addEventListener('audioPlay', handleAudioPlay);\n    window.addEventListener('audioStop', handleAudioStop);\n\n    return () => {\n      window.removeEventListener('audioPlay', handleAudioPlay);\n      window.removeEventListener('audioStop', handleAudioStop);\n    };\n  }, [isPlayerReady]);\n\n  // Adicione este useEffect para monitorar mudanças no selectedVideo\n  useEffect(() => {\n    if (selectedVideo) {\n      const videoId = extractVideoId(selectedVideo.url);\n      if (videoId) {\n        console.log('Detectada mudança no selectedVideo, iniciando com autoplay');\n        handleVideoSelect(selectedVideo, true);\n      }\n    }\n  }, [selectedVideo]);\n\n  return (\n    <div className=\"bg-[#1e1e1e] text-gray-300 rounded-lg shadow-lg p-3\">\n      {/* Formulário de busca */}\n      <form onSubmit={handleAddVideo} className=\"mb-3\">\n        <div className=\"flex flex-col gap-2\">\n          <input\n            type=\"url\"\n            value={newVideoUrl}\n            onChange={(e) => setNewVideoUrl(e.target.value)}\n            placeholder=\"Cole a URL do YouTube ou Vimeo aqui\"\n            className=\"w-full bg-[#2d2d2d] border border-[#404040] text-gray-200 rounded px-3 py-2 focus:border-[#e1aa1e] focus:outline-none\"\n            disabled={isLoading}\n          />\n          {error && <p className=\"text-red-400 text-sm\">{error}</p>}\n        </div>\n      </form>\n\n      {/* Botões de ação */}\n      <div className=\"flex gap-2 mb-3\">\n        <button\n          type=\"button\"\n          onClick={() => handleAddVideo()}\n          className={`flex-1 ${\n            isLoading \n              ? 'bg-[#e1aa1e]/50 cursor-not-allowed' \n              : 'bg-[#e1aa1e] hover:bg-[#e1aa1e]/80'\n          } text-gray-900 px-3 py-1.5 rounded transition-colors flex items-center justify-center gap-2`}\n          disabled={isLoading}\n        >\n          <svg\n            className=\"w-4 h-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M12 4v16m8-8H4\"\n            />\n          </svg>\n          {isLoading ? 'Adicionando...' : 'Buscar Vídeo'}\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsSidebarOpen(true)}\n          className=\"flex-1 bg-[#2d2d2d] hover:bg-[#404040] border border-[#404040] text-[#e1aa1e] px-3 py-1.5 rounded flex items-center justify-center gap-2 transition-colors\"\n        >\n          <svg\n            className=\"w-4 h-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M4 6h16M4 12h16M4 18h16\"\n            />\n          </svg>\n          Últimos Vídeos\n        </button>\n      </div>\n\n      {/* Área do vídeo */}\n      <div>\n        <div className=\"rounded-lg overflow-hidden border border-[#404040]\">\n          <div className=\"relative pt-[56.25%]\">\n            <div\n              id=\"youtube-player\"\n              className=\"absolute top-0 left-0 w-full h-full\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Menu lateral */}\n      <VideoSidebar\n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        videos={videos}\n        onVideoSelect={handleVideoSelect}\n        setIsPlaying={setIsPlaying}\n      />\n    </div>\n  );\n};\n\nexport default VideoPlayer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}