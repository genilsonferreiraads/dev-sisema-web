{"ast":null,"code":"import { supabase } from './supabase';\nexport const authService = {\n  async signIn(username, password) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('check_password', {\n      p_username: username,\n      p_password: password\n    });\n    if (error) throw error;\n    if (data) {\n      // Remove o campo password antes de retornar\n      const {\n        password: _,\n        ...user\n      } = data;\n      return user;\n    }\n    return null;\n  },\n  async getCurrentUser() {\n    const userData = localStorage.getItem('user');\n    return userData ? JSON.parse(userData) : null;\n  },\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n  async changePassword(username, oldPassword, newPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('change_password', {\n      p_username: username,\n      p_old_password: oldPassword,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateUsername(currentUsername, newUsername, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_username', {\n      p_current_username: currentUsername,\n      p_new_username: newUsername,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  }\n};","map":{"version":3,"names":["supabase","authService","signIn","username","password","data","error","rpc","p_username","p_password","_","user","getCurrentUser","userData","localStorage","getItem","JSON","parse","signOut","removeItem","changePassword","oldPassword","newPassword","p_old_password","p_new_password","updateUsername","currentUsername","newUsername","adminPassword","p_current_username","p_new_username","p_admin_password"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/auth.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { User } from '../types/auth';\r\n\r\nexport const authService = {\r\n  async signIn(username: string, password: string): Promise<User | null> {\r\n    const { data, error } = await supabase\r\n      .rpc('check_password', {\r\n        p_username: username,\r\n        p_password: password\r\n      });\r\n\r\n    if (error) throw error;\r\n    \r\n    if (data) {\r\n      // Remove o campo password antes de retornar\r\n      const { password: _, ...user } = data;\r\n      return user as User;\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    const userData = localStorage.getItem('user');\r\n    return userData ? JSON.parse(userData) : null;\r\n  },\r\n\r\n  async signOut() {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  async changePassword(username: string, oldPassword: string, newPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('change_password', {\r\n        p_username: username,\r\n        p_old_password: oldPassword,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateUsername(currentUsername: string, newUsername: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_username', {\r\n        p_current_username: currentUsername,\r\n        p_new_username: newUsername,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAGrC,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,MAAMA,CAACC,QAAgB,EAAEC,QAAgB,EAAwB;IACrE,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,gBAAgB,EAAE;MACrBC,UAAU,EAAEL,QAAQ;MACpBM,UAAU,EAAEL;IACd,CAAC,CAAC;IAEJ,IAAIE,KAAK,EAAE,MAAMA,KAAK;IAEtB,IAAID,IAAI,EAAE;MACR;MACA,MAAM;QAAED,QAAQ,EAAEM,CAAC;QAAE,GAAGC;MAAK,CAAC,GAAGN,IAAI;MACrC,OAAOM,IAAI;IACb;IAEA,OAAO,IAAI;EACb,CAAC;EAED,MAAMC,cAAcA,CAAA,EAAyB;IAC3C,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAOF,QAAQ,GAAGG,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,GAAG,IAAI;EAC/C,CAAC;EAED,MAAMK,OAAOA,CAAA,EAAG;IACdJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,MAAMC,cAAcA,CAACjB,QAAgB,EAAEkB,WAAmB,EAAEC,WAAmB,EAAoB;IACjG,MAAM;MAAEjB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,iBAAiB,EAAE;MACtBC,UAAU,EAAEL,QAAQ;MACpBoB,cAAc,EAAEF,WAAW;MAC3BG,cAAc,EAAEF;IAClB,CAAC,CAAC;IAEJ,IAAIhB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,IAAI,KAAK;EACtB,CAAC;EAED,MAAMoB,cAAcA,CAACC,eAAuB,EAAEC,WAAmB,EAAEC,aAAqB,EAAoB;IAC1G,MAAM;MAAEvB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,iBAAiB,EAAE;MACtBsB,kBAAkB,EAAEH,eAAe;MACnCI,cAAc,EAAEH,WAAW;MAC3BI,gBAAgB,EAAEH;IACpB,CAAC,CAAC;IAEJ,IAAItB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,IAAI,KAAK;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}