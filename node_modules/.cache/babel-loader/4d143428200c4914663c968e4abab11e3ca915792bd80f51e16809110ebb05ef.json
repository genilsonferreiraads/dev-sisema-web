{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\n\n// Suas configurações do Supabase\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nexport const supabase = createClient(supabaseUrl, supabaseKey);\nexport const audioService = {\n  async getAudios() {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  },\n  async getAudio(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').eq('id', id).single();\n    if (error) throw error;\n    return data;\n  },\n  async addAudio(audio) {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').insert([audio]).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async updateAudio(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  async deleteAudio(id) {\n    const {\n      error\n    } = await supabase.from('audios').delete().eq('id', id);\n    if (error) throw error;\n  },\n  async loadPreferences(audioId) {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('auto_repeat, repeat_interval, timer_end_at, last_played_at, play_count').eq('id', audioId).single();\n    if (error) throw error;\n    return {\n      auto_repeat: data.auto_repeat || false,\n      repeat_interval: data.repeat_interval || 0,\n      timer_end_at: data.timer_end_at,\n      last_played_at: data.last_played_at,\n      play_count: data.play_count || 0\n    };\n  },\n  async updatePreferences(audioId, prefs) {\n    const {\n      error\n    } = await supabase.from('audios').update(prefs).eq('id', audioId);\n    if (error) throw error;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_ANON_KEY","supabase","audioService","getAudios","data","error","from","select","order","ascending","getAudio","id","eq","single","addAudio","audio","insert","updateAudio","updates","update","deleteAudio","delete","loadPreferences","audioId","auto_repeat","repeat_interval","timer_end_at","last_played_at","play_count","updatePreferences","prefs"],"sources":["C:/Users/genil/Desktop/site 01 império/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Suas configurações do Supabase\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL!;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseKey);\n\nexport interface AudioData {\n  id: string;\n  title: string;\n  url: string;\n  created_at?: string;\n  auto_repeat?: boolean;\n  repeat_interval?: number;\n  timer_end_at?: string;\n  last_played_at?: string;\n  play_count?: number;\n}\n\nexport const audioService = {\n  async getAudios(): Promise<AudioData[]> {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data || [];\n  },\n\n  async getAudio(id: string): Promise<AudioData | null> {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async addAudio(audio: Partial<AudioData>): Promise<AudioData> {\n    const { data, error } = await supabase\n      .from('audios')\n      .insert([audio])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async updateAudio(id: string, updates: Partial<AudioData>): Promise<AudioData> {\n    const { data, error } = await supabase\n      .from('audios')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  async deleteAudio(id: string): Promise<void> {\n    const { error } = await supabase\n      .from('audios')\n      .delete()\n      .eq('id', id);\n\n    if (error) throw error;\n  },\n\n  async loadPreferences(audioId: string): Promise<{\n    auto_repeat: boolean;\n    repeat_interval: number;\n    timer_end_at?: string;\n    last_played_at?: string;\n    play_count: number;\n  }> {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('auto_repeat, repeat_interval, timer_end_at, last_played_at, play_count')\n      .eq('id', audioId)\n      .single();\n\n    if (error) throw error;\n    return {\n      auto_repeat: data.auto_repeat || false,\n      repeat_interval: data.repeat_interval || 0,\n      timer_end_at: data.timer_end_at,\n      last_played_at: data.last_played_at,\n      play_count: data.play_count || 0\n    };\n  },\n\n  async updatePreferences(audioId: string, prefs: {\n    auto_repeat?: boolean;\n    repeat_interval?: number;\n    timer_end_at?: string;\n    last_played_at?: string;\n    play_count?: number;\n  }): Promise<void> {\n    const { error } = await supabase\n      .from('audios')\n      .update(prefs)\n      .eq('id', audioId);\n\n    if (error) throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}