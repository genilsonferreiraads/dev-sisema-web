{"ast":null,"code":"import { supabase } from './supabase';\nexport const authService = {\n  async signIn(username, password) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('users').select('*').eq('username', username).eq('password', password).single();\n      if (error) throw error;\n      if (data) {\n        const userData = {\n          id: data.id,\n          username: data.username,\n          full_name: data.full_name,\n          role: data.role,\n          display_name: data.display_name\n        };\n        localStorage.setItem('user', JSON.stringify(userData));\n        return userData;\n      }\n      return null;\n    } catch (error) {\n      throw new Error('Credenciais inválidas');\n    }\n  },\n  async getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n  async changePassword(username, adminPassword, newPassword) {\n    if (!username || !adminPassword || !newPassword) {\n      throw new Error('Todos os campos são obrigatórios');\n    }\n    const {\n      data,\n      error\n    } = await supabase.rpc('change_password', {\n      p_username: username,\n      p_admin_password: adminPassword,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateUsername(currentUsername, newUsername, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_username', {\n      p_current_username: currentUsername,\n      p_new_username: newUsername,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateDisplayName(username, newDisplayName, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_display_name', {\n      p_username: username,\n      p_display_name: newDisplayName,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async listUsers() {\n    const {\n      data,\n      error\n    } = await supabase.rpc('list_users');\n    if (error) throw error;\n    return data || [];\n  },\n  async updateUserCredentials(username, newUsername, newPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_user_credentials', {\n      p_username: username,\n      p_new_username: newUsername,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  }\n};","map":{"version":3,"names":["supabase","authService","signIn","username","password","data","error","from","select","eq","single","userData","id","full_name","role","display_name","localStorage","setItem","JSON","stringify","Error","getCurrentUser","userStr","getItem","parse","signOut","removeItem","changePassword","adminPassword","newPassword","rpc","p_username","p_admin_password","p_new_password","updateUsername","currentUsername","newUsername","p_current_username","p_new_username","updateDisplayName","newDisplayName","p_display_name","listUsers","updateUserCredentials"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/auth.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { User, UserListItem } from '../types/auth';\r\n\r\nexport const authService = {\r\n  async signIn(username: string, password: string): Promise<User | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('username', username)\r\n        .eq('password', password)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      if (data) {\r\n        const userData: User = {\r\n          id: data.id,\r\n          username: data.username,\r\n          full_name: data.full_name,\r\n          role: data.role,\r\n          display_name: data.display_name\r\n        };\r\n        \r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return userData;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      throw new Error('Credenciais inválidas');\r\n    }\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  },\r\n\r\n  async signOut(): Promise<void> {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  async changePassword(username: string, adminPassword: string, newPassword: string): Promise<boolean> {\r\n    if (!username || !adminPassword || !newPassword) {\r\n      throw new Error('Todos os campos são obrigatórios');\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .rpc('change_password', {\r\n        p_username: username,\r\n        p_admin_password: adminPassword,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateUsername(currentUsername: string, newUsername: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_username', {\r\n        p_current_username: currentUsername,\r\n        p_new_username: newUsername,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateDisplayName(username: string, newDisplayName: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_display_name', {\r\n        p_username: username,\r\n        p_display_name: newDisplayName,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async listUsers(): Promise<UserListItem[]> {\r\n    const { data, error } = await supabase\r\n      .rpc('list_users');\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  async updateUserCredentials(username: string, newUsername: string | null, newPassword: string | null): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_user_credentials', {\r\n        p_username: username,\r\n        p_new_username: newUsername,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}