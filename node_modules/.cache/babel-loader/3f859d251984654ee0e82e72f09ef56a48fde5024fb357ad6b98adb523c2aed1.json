{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\nexport const audioService = {\n  async getAudios() {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  },\n  async addAudio(audio) {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').insert([audio]).select();\n    if (error) throw error;\n    return data[0];\n  },\n  async updateAudio(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(updates).eq('id', id).select();\n    if (error) throw error;\n    return data[0];\n  },\n  async deleteAudio(id) {\n    const {\n      error\n    } = await supabase.from('audios').delete().eq('id', id);\n    if (error) throw error;\n  }\n};\nexport const videoService = {\n  async getRecentVideos() {\n    const {\n      data,\n      error\n    } = await supabase.from('videos').select('*').order('created_at', {\n      ascending: false\n    }).limit(20);\n    if (error) throw error;\n    return data;\n  },\n  async addVideo(url) {\n    const {\n      data,\n      error\n    } = await supabase.from('videos').insert([{\n      url\n    }]).select();\n    if (error) throw error;\n    return data[0];\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","audioService","getAudios","data","error","from","select","order","ascending","addAudio","audio","insert","updateAudio","id","updates","update","eq","deleteAudio","delete","videoService","getRecentVideos","limit","addVideo","url"],"sources":["C:/Users/genil/pasta teste/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL!;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY!;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\nexport interface AudioData {\r\n  id: string;\r\n  title: string;\r\n  url: string;\r\n  interval?: number;\r\n  isAutoPlay?: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport interface VideoData {\r\n  id: string;\r\n  url: string;\r\n  created_at: string;\r\n}\r\n\r\nexport const audioService = {\r\n  async getAudios() {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) throw error;\r\n    return data as AudioData[];\r\n  },\r\n\r\n  async addAudio(audio: Omit<AudioData, 'id' | 'created_at'>) {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .insert([audio])\r\n      .select();\r\n    \r\n    if (error) throw error;\r\n    return data[0] as AudioData;\r\n  },\r\n\r\n  async updateAudio(id: string, updates: Partial<AudioData>) {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select();\r\n    \r\n    if (error) throw error;\r\n    return data[0] as AudioData;\r\n  },\r\n\r\n  async deleteAudio(id: string) {\r\n    const { error } = await supabase\r\n      .from('audios')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  }\r\n};\r\n\r\nexport const videoService = {\r\n  async getRecentVideos() {\r\n    const { data, error } = await supabase\r\n      .from('videos')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n      .limit(20);\r\n    \r\n    if (error) throw error;\r\n    return data as VideoData[];\r\n  },\r\n\r\n  async addVideo(url: string) {\r\n    const { data, error } = await supabase\r\n      .from('videos')\r\n      .insert([{ url }])\r\n      .select();\r\n    \r\n    if (error) throw error;\r\n    return data[0] as VideoData;\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAuB;AACvD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA4B;AAEhE,OAAO,MAAMC,QAAQ,GAAGP,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;AAiBlE,OAAO,MAAMG,YAAY,GAAG;EAC1B,MAAMC,SAASA,CAAA,EAAG;IAChB,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAE5C,IAAIJ,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC;EAED,MAAMM,QAAQA,CAACC,KAA2C,EAAE;IAC1D,MAAM;MAAEP,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdM,MAAM,CAAC,CAACD,KAAK,CAAC,CAAC,CACfJ,MAAM,CAAC,CAAC;IAEX,IAAIF,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,MAAMS,WAAWA,CAACC,EAAU,EAAEC,OAA2B,EAAE;IACzD,MAAM;MAAEX,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdU,MAAM,CAACD,OAAO,CAAC,CACfE,EAAE,CAAC,IAAI,EAAEH,EAAE,CAAC,CACZP,MAAM,CAAC,CAAC;IAEX,IAAIF,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,MAAMc,WAAWA,CAACJ,EAAU,EAAE;IAC5B,MAAM;MAAET;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC7BK,IAAI,CAAC,QAAQ,CAAC,CACda,MAAM,CAAC,CAAC,CACRF,EAAE,CAAC,IAAI,EAAEH,EAAE,CAAC;IAEf,IAAIT,KAAK,EAAE,MAAMA,KAAK;EACxB;AACF,CAAC;AAED,OAAO,MAAMe,YAAY,GAAG;EAC1B,MAAMC,eAAeA,CAAA,EAAG;IACtB,MAAM;MAAEjB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC,CACzCa,KAAK,CAAC,EAAE,CAAC;IAEZ,IAAIjB,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC;EAED,MAAMmB,QAAQA,CAACC,GAAW,EAAE;IAC1B,MAAM;MAAEpB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdM,MAAM,CAAC,CAAC;MAAEY;IAAI,CAAC,CAAC,CAAC,CACjBjB,MAAM,CAAC,CAAC;IAEX,IAAIF,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,CAAC,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}