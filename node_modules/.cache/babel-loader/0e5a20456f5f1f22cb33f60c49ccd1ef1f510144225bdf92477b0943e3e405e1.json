{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\nexport const audioService = {\n  async getAudios() {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Erro ao buscar áudios:', error);\n      throw error;\n    }\n    console.log('Dados retornados do Supabase:', data); // Para debug\n    return data;\n  },\n  async addAudio(audio) {\n    console.log('Tentando adicionar áudio com dados:', audio);\n    const {\n      data,\n      error\n    } = await supabase.from('audios').insert([{\n      title: audio.title,\n      url: audio.url,\n      auto_repeat: false,\n      repeat_interval: 0,\n      play_count: 0\n    }]).select().single();\n    if (error) {\n      console.error('Erro ao adicionar áudio:', error);\n      throw error;\n    }\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n    return data;\n  },\n  async deleteAudio(id) {\n    const {\n      error\n    } = await supabase.from('audios').delete().eq('id', id);\n    if (error) throw error;\n  },\n  updateAudio: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  updatePreferences: async (audioId, preferences) => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(preferences).eq('id', audioId).select().single();\n    if (error) throw error;\n    return data;\n  },\n  loadPreferences: async audioId => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('auto_repeat, repeat_interval, last_played_at, play_count, timer_end_at').eq('id', audioId).single();\n    if (error) throw error;\n    return data;\n  }\n};\nexport const videoService = {\n  async getRecentVideos() {\n    const {\n      data,\n      error\n    } = await supabase.from('videos').select('*').order('created_at', {\n      ascending: false\n    }).limit(20);\n    if (error) {\n      console.error('Erro ao buscar vídeos:', error);\n      throw new Error(`Erro ao buscar vídeos: ${error.message}`);\n    }\n    console.log('Vídeos carregados:', data);\n    return data;\n  },\n  async addVideo(url, title) {\n    if (!url) {\n      throw new Error('URL não pode estar vazia');\n    }\n    console.log('Tentando adicionar vídeo:', {\n      url,\n      title\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('videos').insert([{\n      url,\n      title\n    }]).select().single();\n    if (error) {\n      console.error('Erro detalhado do Supabase:', error);\n      throw new Error(error.message || 'Erro ao adicionar vídeo no banco de dados');\n    }\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n    console.log('Vídeo adicionado com sucesso:', data);\n    return data;\n  },\n  async deleteVideo(id) {\n    const {\n      error\n    } = await supabase.from('videos').delete().eq('id', id);\n    if (error) {\n      throw new Error(`Erro ao deletar vídeo: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","supabase","audioService","getAudios","data","error","from","select","order","ascending","console","log","addAudio","audio","insert","title","url","auto_repeat","repeat_interval","play_count","single","Error","deleteAudio","id","delete","eq","updateAudio","updates","update","updatePreferences","audioId","preferences","loadPreferences","videoService","getRecentVideos","limit","message","addVideo","deleteVideo"],"sources":["C:/Users/genil/pasta teste/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL!;\r\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY!;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\nexport interface AudioData {\r\n  id: string;\r\n  title: string;\r\n  url: string;\r\n  created_at: string;\r\n  auto_repeat: boolean;\r\n  repeat_interval: number;\r\n  last_played_at?: string;\r\n  play_count?: number;\r\n  timer_end_at?: string;\r\n}\r\n\r\nexport interface VideoData {\r\n  id: string;\r\n  url: string;\r\n  title?: string;\r\n  created_at: string;\r\n}\r\n\r\nexport const audioService = {\r\n  async getAudios() {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n    \r\n    if (error) {\r\n      console.error('Erro ao buscar áudios:', error);\r\n      throw error;\r\n    }\r\n\r\n    console.log('Dados retornados do Supabase:', data); // Para debug\r\n    return data as AudioData[];\r\n  },\r\n\r\n  async addAudio(audio: Omit<AudioData, 'id' | 'created_at'>) {\r\n    console.log('Tentando adicionar áudio com dados:', audio);\r\n    \r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .insert([{\r\n        title: audio.title,\r\n        url: audio.url,\r\n        auto_repeat: false,\r\n        repeat_interval: 0,\r\n        play_count: 0\r\n      }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Erro ao adicionar áudio:', error);\r\n      throw error;\r\n    }\r\n\r\n    if (!data) {\r\n      throw new Error('Nenhum dado retornado após inserção');\r\n    }\r\n\r\n    return data as AudioData;\r\n  },\r\n\r\n  async deleteAudio(id: string) {\r\n    const { error } = await supabase\r\n      .from('audios')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) throw error;\r\n  },\r\n\r\n  updateAudio: async (id: string, updates: Partial<AudioData>) => {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data as AudioData;\r\n  },\r\n\r\n  updatePreferences: async (audioId: string, preferences: {\r\n    auto_repeat?: boolean;\r\n    repeat_interval?: number;\r\n    last_played_at?: string;\r\n    play_count?: number;\r\n    timer_end_at?: string;\r\n  }) => {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .update(preferences)\r\n      .eq('id', audioId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data as AudioData;\r\n  },\r\n\r\n  loadPreferences: async (audioId: string) => {\r\n    const { data, error } = await supabase\r\n      .from('audios')\r\n      .select('auto_repeat, repeat_interval, last_played_at, play_count, timer_end_at')\r\n      .eq('id', audioId)\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const videoService = {\r\n  async getRecentVideos() {\r\n    const { data, error } = await supabase\r\n      .from('videos')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n      .limit(20);\r\n    \r\n    if (error) {\r\n      console.error('Erro ao buscar vídeos:', error);\r\n      throw new Error(`Erro ao buscar vídeos: ${error.message}`);\r\n    }\r\n    console.log('Vídeos carregados:', data);\r\n    return data as VideoData[];\r\n  },\r\n\r\n  async addVideo(url: string, title: string) {\r\n    if (!url) {\r\n      throw new Error('URL não pode estar vazia');\r\n    }\r\n\r\n    console.log('Tentando adicionar vídeo:', { url, title });\r\n    \r\n    const { data, error } = await supabase\r\n      .from('videos')\r\n      .insert([{ url, title }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      console.error('Erro detalhado do Supabase:', error);\r\n      throw new Error(\r\n        error.message || \r\n        'Erro ao adicionar vídeo no banco de dados'\r\n      );\r\n    }\r\n\r\n    if (!data) {\r\n      throw new Error('Nenhum dado retornado após inserção');\r\n    }\r\n\r\n    console.log('Vídeo adicionado com sucesso:', data);\r\n    return data as VideoData;\r\n  },\r\n\r\n  async deleteVideo(id: string) {\r\n    const { error } = await supabase\r\n      .from('videos')\r\n      .delete()\r\n      .eq('id', id);\r\n    \r\n    if (error) {\r\n      throw new Error(`Erro ao deletar vídeo: ${error.message}`);\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAuB;AACvD,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA4B;AAEhE,OAAO,MAAMC,QAAQ,GAAGP,YAAY,CAACC,WAAW,EAAEI,eAAe,CAAC;AAqBlE,OAAO,MAAMG,YAAY,GAAG;EAC1B,MAAMC,SAASA,CAAA,EAAG;IAChB,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAE5C,IAAIJ,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;IAEAK,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEP,IAAI,CAAC,CAAC,CAAC;IACpD,OAAOA,IAAI;EACb,CAAC;EAED,MAAMQ,QAAQA,CAACC,KAA2C,EAAE;IAC1DH,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEE,KAAK,CAAC;IAEzD,MAAM;MAAET,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdQ,MAAM,CAAC,CAAC;MACPC,KAAK,EAAEF,KAAK,CAACE,KAAK;MAClBC,GAAG,EAAEH,KAAK,CAACG,GAAG;MACdC,WAAW,EAAE,KAAK;MAClBC,eAAe,EAAE,CAAC;MAClBC,UAAU,EAAE;IACd,CAAC,CAAC,CAAC,CACFZ,MAAM,CAAC,CAAC,CACRa,MAAM,CAAC,CAAC;IAEX,IAAIf,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;IAEA,IAAI,CAACD,IAAI,EAAE;MACT,MAAM,IAAIiB,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,OAAOjB,IAAI;EACb,CAAC;EAED,MAAMkB,WAAWA,CAACC,EAAU,EAAE;IAC5B,MAAM;MAAElB;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC7BK,IAAI,CAAC,QAAQ,CAAC,CACdkB,MAAM,CAAC,CAAC,CACRC,EAAE,CAAC,IAAI,EAAEF,EAAE,CAAC;IAEf,IAAIlB,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC;EAEDqB,WAAW,EAAE,MAAAA,CAAOH,EAAU,EAAEI,OAA2B,KAAK;IAC9D,MAAM;MAAEvB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdsB,MAAM,CAACD,OAAO,CAAC,CACfF,EAAE,CAAC,IAAI,EAAEF,EAAE,CAAC,CACZhB,MAAM,CAAC,CAAC,CACRa,MAAM,CAAC,CAAC;IAEX,IAAIf,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC;EAEDyB,iBAAiB,EAAE,MAAAA,CAAOC,OAAe,EAAEC,WAM1C,KAAK;IACJ,MAAM;MAAE3B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdsB,MAAM,CAACG,WAAW,CAAC,CACnBN,EAAE,CAAC,IAAI,EAAEK,OAAO,CAAC,CACjBvB,MAAM,CAAC,CAAC,CACRa,MAAM,CAAC,CAAC;IAEX,IAAIf,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC;EAED4B,eAAe,EAAE,MAAOF,OAAe,IAAK;IAC1C,MAAM;MAAE1B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,wEAAwE,CAAC,CAChFkB,EAAE,CAAC,IAAI,EAAEK,OAAO,CAAC,CACjBV,MAAM,CAAC,CAAC;IAEX,IAAIf,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAM6B,YAAY,GAAG;EAC1B,MAAMC,eAAeA,CAAA,EAAG;IACtB,MAAM;MAAE9B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC,CACzC0B,KAAK,CAAC,EAAE,CAAC;IAEZ,IAAI9B,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAM,IAAIgB,KAAK,CAAC,0BAA0BhB,KAAK,CAAC+B,OAAO,EAAE,CAAC;IAC5D;IACA1B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEP,IAAI,CAAC;IACvC,OAAOA,IAAI;EACb,CAAC;EAED,MAAMiC,QAAQA,CAACrB,GAAW,EAAED,KAAa,EAAE;IACzC,IAAI,CAACC,GAAG,EAAE;MACR,MAAM,IAAIK,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IAEAX,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE;MAAEK,GAAG;MAAED;IAAM,CAAC,CAAC;IAExD,MAAM;MAAEX,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CACnCK,IAAI,CAAC,QAAQ,CAAC,CACdQ,MAAM,CAAC,CAAC;MAAEE,GAAG;MAAED;IAAM,CAAC,CAAC,CAAC,CACxBR,MAAM,CAAC,CAAC,CACRa,MAAM,CAAC,CAAC;IAEX,IAAIf,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAM,IAAIgB,KAAK,CACbhB,KAAK,CAAC+B,OAAO,IACb,2CACF,CAAC;IACH;IAEA,IAAI,CAAChC,IAAI,EAAE;MACT,MAAM,IAAIiB,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEAX,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEP,IAAI,CAAC;IAClD,OAAOA,IAAI;EACb,CAAC;EAED,MAAMkC,WAAWA,CAACf,EAAU,EAAE;IAC5B,MAAM;MAAElB;IAAM,CAAC,GAAG,MAAMJ,QAAQ,CAC7BK,IAAI,CAAC,QAAQ,CAAC,CACdkB,MAAM,CAAC,CAAC,CACRC,EAAE,CAAC,IAAI,EAAEF,EAAE,CAAC;IAEf,IAAIlB,KAAK,EAAE;MACT,MAAM,IAAIgB,KAAK,CAAC,0BAA0BhB,KAAK,CAAC+B,OAAO,EAAE,CAAC;IAC5D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}