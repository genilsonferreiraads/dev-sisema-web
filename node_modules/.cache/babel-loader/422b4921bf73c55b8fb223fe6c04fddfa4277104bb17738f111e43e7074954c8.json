{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\genil\\\\Desktop\\\\sistema da imperio\\\\src\\\\components\\\\VideoPlayer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { videoService } from '../lib/supabase';\nimport VideoSidebar from './VideoSidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = ({\n  videoId,\n  onEnded,\n  autoplay = false,\n  isPlaying = false,\n  setIsPlaying = () => {},\n  shouldAutoplay = false\n}) => {\n  _s();\n  var _videos$2;\n  const [videos, setVideos] = useState([]);\n  const [newVideoUrl, setNewVideoUrl] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [player, setPlayer] = useState(null);\n  const [isPlayerReady, setIsPlayerReady] = useState(false);\n  const [localIsPlaying, setLocalIsPlaying] = useState(isPlaying);\n  useEffect(() => {\n    setLocalIsPlaying(isPlaying);\n  }, [isPlaying]);\n  const updatePlayingState = state => {\n    setLocalIsPlaying(state);\n    setIsPlaying(state);\n  };\n  const loadVideos = async () => {\n    try {\n      setIsLoading(true);\n      const data = await videoService.getRecentVideos();\n      setVideos(data);\n      if (data.length > 0 && !selectedVideo) {\n        setSelectedVideo(data[0]);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar vídeos:', error);\n      setError('Erro ao carregar a lista de vídeos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSearch = async searchTerm => {\n    try {\n      setIsLoading(true);\n      // Filtra os vídeos localmente baseado no termo de busca\n      const searchResults = videos.filter(video => {\n        var _video$title;\n        return ((_video$title = video.title) === null || _video$title === void 0 ? void 0 : _video$title.toLowerCase().includes(searchTerm.toLowerCase())) || video.url.toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setVideos(searchResults);\n    } catch (error) {\n      console.error('Erro na busca:', error);\n      setError('Erro ao buscar vídeos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleAddVideo = async () => {\n    if (!newVideoUrl.trim()) return;\n    try {\n      setIsLoading(true);\n      const videoId = extractVideoId(newVideoUrl);\n      if (!videoId) {\n        setError('URL do vídeo inválida');\n        return;\n      }\n      const videoTitle = await getVideoTitle(videoId);\n      await videoService.addVideo(newVideoUrl, videoTitle);\n      setNewVideoUrl('');\n      await loadVideos();\n    } catch (error) {\n      console.error('Erro ao adicionar vídeo:', error);\n      setError('Erro ao adicionar vídeo');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getVideoTitle = async videoId => {\n    try {\n      var _data$items, _data$items$, _data$items$$snippet;\n      const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}&part=snippet`);\n      const data = await response.json();\n      return ((_data$items = data.items) === null || _data$items === void 0 ? void 0 : (_data$items$ = _data$items[0]) === null || _data$items$ === void 0 ? void 0 : (_data$items$$snippet = _data$items$.snippet) === null || _data$items$$snippet === void 0 ? void 0 : _data$items$$snippet.title) || 'Vídeo sem título';\n    } catch (error) {\n      console.error('Erro ao obter título do vídeo:', error);\n      return 'Vídeo sem título';\n    }\n  };\n  const extractVideoId = url => {\n    const patterns = [/(?:youtube\\.com\\/watch\\?v=|youtu.be\\/)([^&\\n?#]+)/, /youtube.com\\/embed\\/([^&\\n?#]+)/];\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match && match[1]) {\n        return match[1];\n      }\n    }\n    return null;\n  };\n  const handleVideoSelect = async (video, shouldAutoplay = false) => {\n    try {\n      console.log('handleVideoSelect chamado com autoplay:', shouldAutoplay);\n      const videoId = extractVideoId(video.url);\n      if (!videoId) {\n        console.error('VideoId não encontrado para:', video.url);\n        return;\n      }\n      if (player && isPlayerReady) {\n        console.log('Player existente, carregando novo vídeo');\n        try {\n          player.loadVideoById({\n            videoId: videoId,\n            startSeconds: 0,\n            suggestedQuality: 'large'\n          });\n          if (shouldAutoplay) {\n            console.log('Iniciando reprodução com player existente');\n            player.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao carregar vídeo:', e);\n        }\n      } else {\n        console.log('Inicializando novo player');\n        try {\n          const newPlayer = await initializePlayer(videoId, true);\n          if (newPlayer) {\n            console.log('Novo player criado, iniciando reprodução');\n            newPlayer.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao inicializar novo player:', e);\n        }\n      }\n    } catch (error) {\n      console.error('Erro em handleVideoSelect:', error);\n    }\n  };\n  useEffect(() => {\n    loadVideos();\n  }, []);\n  const loadYouTubeAPI = () => {\n    return new Promise(resolve => {\n      var _firstScriptTag$paren;\n      const existingScript = document.querySelector('script[src=\"https://www.youtube.com/iframe_api\"]');\n      if (existingScript) {\n        if (window.YT && window.YT.Player) {\n          resolve();\n          return;\n        }\n      }\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.async = true;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      (_firstScriptTag$paren = firstScriptTag.parentNode) === null || _firstScriptTag$paren === void 0 ? void 0 : _firstScriptTag$paren.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        resolve();\n      };\n    });\n  };\n  const initializePlayer = async (videoId, shouldAutoplay = false) => {\n    try {\n      var _YT;\n      await loadYouTubeAPI();\n      if (!((_YT = window.YT) !== null && _YT !== void 0 && _YT.Player)) {\n        setError('API do YouTube não está disponível');\n        return null;\n      }\n      if (player) {\n        try {\n          player.destroy();\n        } catch (e) {\n          console.error('Erro ao destruir player existente:', e);\n        }\n        setPlayer(null);\n      }\n      const playerContainer = document.getElementById('youtube-player');\n      if (!playerContainer) {\n        setError('Container do player não encontrado');\n        return null;\n      }\n      while (playerContainer.firstChild) {\n        playerContainer.removeChild(playerContainer.firstChild);\n      }\n      const newPlayer = new window.YT.Player('youtube-player', {\n        height: '100%',\n        width: '100%',\n        videoId: videoId,\n        playerVars: {\n          autoplay: shouldAutoplay ? 1 : 0,\n          controls: 1,\n          rel: 0\n        },\n        events: {\n          onReady: () => {\n            setIsPlayerReady(true);\n            if (shouldAutoplay) {\n              try {\n                newPlayer.playVideo();\n                updatePlayingState(true);\n              } catch (error) {\n                console.error('Erro ao iniciar reprodução:', error);\n                updatePlayingState(false);\n              }\n            }\n          },\n          onStateChange: event => {\n            try {\n              if (event.data === window.YT.PlayerState.ENDED) {\n                updatePlayingState(false);\n                onEnded === null || onEnded === void 0 ? void 0 : onEnded();\n              } else if (event.data === window.YT.PlayerState.PLAYING) {\n                updatePlayingState(true);\n              } else if (event.data === window.YT.PlayerState.PAUSED) {\n                updatePlayingState(false);\n              }\n            } catch (error) {\n              console.error('Erro ao processar mudança de estado:', error);\n              updatePlayingState(false);\n            }\n          },\n          onError: error => {\n            console.error('Erro no player do YouTube:', error);\n            setError('Erro ao carregar o vídeo');\n            updatePlayingState(false);\n          }\n        }\n      });\n      setPlayer(newPlayer);\n      return newPlayer;\n    } catch (error) {\n      console.error('Erro ao inicializar player:', error);\n      setError('Erro ao inicializar o player de vídeo');\n      updatePlayingState(false);\n      return null;\n    }\n  };\n  useEffect(() => {\n    if (selectedVideo || videos[0]) {\n      var _videos$;\n      const videoId = extractVideoId((selectedVideo === null || selectedVideo === void 0 ? void 0 : selectedVideo.url) || ((_videos$ = videos[0]) === null || _videos$ === void 0 ? void 0 : _videos$.url));\n      if (videoId) {\n        initializePlayer(videoId, shouldAutoplay);\n      }\n    }\n    return () => {\n      if (player) {\n        try {\n          player.destroy();\n          setPlayer(null);\n          setIsPlayerReady(false);\n        } catch (error) {\n          console.error('Erro ao destruir player:', error);\n        }\n      }\n    };\n  }, [selectedVideo === null || selectedVideo === void 0 ? void 0 : selectedVideo.url, (_videos$2 = videos[0]) === null || _videos$2 === void 0 ? void 0 : _videos$2.url]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col md:flex-row h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsSidebarOpen(!isSidebarOpen),\n          className: \"flex items-center space-x-2 text-white hover:text-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"w-4 h-4\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: 2,\n              d: \"M4 6h16M4 12h16M4 18h16\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xDAltimos V\\xEDdeos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-lg overflow-hidden border border-[#404040]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative pt-[56.25%]\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"youtube-player\",\n            className: \"absolute top-0 left-0 w-full h-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 p-4 bg-red-500 text-white rounded\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoSidebar, {\n      isOpen: isSidebarOpen,\n      onClose: () => setIsSidebarOpen(false),\n      videos: videos,\n      onVideoSelect: handleVideoSelect,\n      setIsPlaying: setIsPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"x5p5rc3TI5TECFbZ5wKpHZObrdc=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useEffect","videoService","VideoSidebar","jsxDEV","_jsxDEV","VideoPlayer","videoId","onEnded","autoplay","isPlaying","setIsPlaying","shouldAutoplay","_s","_videos$2","videos","setVideos","newVideoUrl","setNewVideoUrl","error","setError","isLoading","setIsLoading","isSidebarOpen","setIsSidebarOpen","selectedVideo","setSelectedVideo","player","setPlayer","isPlayerReady","setIsPlayerReady","localIsPlaying","setLocalIsPlaying","updatePlayingState","state","loadVideos","data","getRecentVideos","length","console","handleSearch","searchTerm","searchResults","filter","video","_video$title","title","toLowerCase","includes","url","handleAddVideo","trim","extractVideoId","videoTitle","getVideoTitle","addVideo","_data$items","_data$items$","_data$items$$snippet","response","fetch","process","env","REACT_APP_YOUTUBE_API_KEY","json","items","snippet","patterns","pattern","match","handleVideoSelect","log","loadVideoById","startSeconds","suggestedQuality","playVideo","e","newPlayer","initializePlayer","loadYouTubeAPI","Promise","resolve","_firstScriptTag$paren","existingScript","document","querySelector","window","YT","Player","tag","createElement","src","async","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","_YT","destroy","playerContainer","getElementById","firstChild","removeChild","height","width","playerVars","controls","rel","events","onReady","onStateChange","event","PlayerState","ENDED","PLAYING","PAUSED","onError","_videos$","className","children","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","id","isOpen","onClose","onVideoSelect","_c","$RefreshReg$"],"sources":["C:/Users/genil/Desktop/sistema da imperio/src/components/VideoPlayer.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { videoService, VideoData } from '../lib/supabase';\nimport VideoSidebar from './VideoSidebar';\n\ninterface VideoPlayerProps {\n  videoId: string;\n  onEnded?: () => void;\n  autoplay?: boolean;\n  isPlaying?: boolean;\n  setIsPlaying?: (playing: boolean) => void;\n  shouldAutoplay?: boolean;\n}\n\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({ \n  videoId, \n  onEnded,\n  autoplay = false,\n  isPlaying = false,\n  setIsPlaying = () => {},\n  shouldAutoplay = false\n}) => {\n  const [videos, setVideos] = useState<VideoData[]>([]);\n  const [newVideoUrl, setNewVideoUrl] = useState('');\n  const [error, setError] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState<VideoData | null>(null);\n  const [player, setPlayer] = useState<any>(null);\n  const [isPlayerReady, setIsPlayerReady] = useState(false);\n  const [localIsPlaying, setLocalIsPlaying] = useState(isPlaying);\n\n  useEffect(() => {\n    setLocalIsPlaying(isPlaying);\n  }, [isPlaying]);\n\n  const updatePlayingState = (state: boolean) => {\n    setLocalIsPlaying(state);\n    setIsPlaying(state);\n  };\n\n  const loadVideos = async () => {\n    try {\n      setIsLoading(true);\n      const data = await videoService.getRecentVideos();\n      setVideos(data);\n      if (data.length > 0 && !selectedVideo) {\n        setSelectedVideo(data[0]);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar vídeos:', error);\n      setError('Erro ao carregar a lista de vídeos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSearch = async (searchTerm: string) => {\n    try {\n      setIsLoading(true);\n      // Filtra os vídeos localmente baseado no termo de busca\n      const searchResults = videos.filter(video => \n        video.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        video.url.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n      setVideos(searchResults);\n    } catch (error) {\n      console.error('Erro na busca:', error);\n      setError('Erro ao buscar vídeos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddVideo = async () => {\n    if (!newVideoUrl.trim()) return;\n\n    try {\n      setIsLoading(true);\n      const videoId = extractVideoId(newVideoUrl);\n      if (!videoId) {\n        setError('URL do vídeo inválida');\n        return;\n      }\n\n      const videoTitle = await getVideoTitle(videoId);\n      await videoService.addVideo(newVideoUrl, videoTitle);\n      setNewVideoUrl('');\n      await loadVideos();\n    } catch (error) {\n      console.error('Erro ao adicionar vídeo:', error);\n      setError('Erro ao adicionar vídeo');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getVideoTitle = async (videoId: string): Promise<string> => {\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}&part=snippet`\n      );\n      const data = await response.json();\n      return data.items?.[0]?.snippet?.title || 'Vídeo sem título';\n    } catch (error) {\n      console.error('Erro ao obter título do vídeo:', error);\n      return 'Vídeo sem título';\n    }\n  };\n\n  const extractVideoId = (url: string): string | null => {\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=|youtu.be\\/)([^&\\n?#]+)/,\n      /youtube.com\\/embed\\/([^&\\n?#]+)/,\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match && match[1]) {\n        return match[1];\n      }\n    }\n    return null;\n  };\n\n  const handleVideoSelect = async (video: VideoData, shouldAutoplay: boolean = false) => {\n    try {\n      console.log('handleVideoSelect chamado com autoplay:', shouldAutoplay);\n      \n      const videoId = extractVideoId(video.url);\n      if (!videoId) {\n        console.error('VideoId não encontrado para:', video.url);\n        return;\n      }\n\n      if (player && isPlayerReady) {\n        console.log('Player existente, carregando novo vídeo');\n        try {\n          player.loadVideoById({\n            videoId: videoId,\n            startSeconds: 0,\n            suggestedQuality: 'large'\n          });\n          \n          if (shouldAutoplay) {\n            console.log('Iniciando reprodução com player existente');\n            player.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao carregar vídeo:', e);\n        }\n      } else {\n        console.log('Inicializando novo player');\n        try {\n          const newPlayer = await initializePlayer(videoId, true);\n          if (newPlayer) {\n            console.log('Novo player criado, iniciando reprodução');\n            newPlayer.playVideo();\n            updatePlayingState(true);\n          }\n        } catch (e) {\n          console.error('Erro ao inicializar novo player:', e);\n        }\n      }\n    } catch (error) {\n      console.error('Erro em handleVideoSelect:', error);\n    }\n  };\n\n  useEffect(() => {\n    loadVideos();\n  }, []);\n\n  const loadYouTubeAPI = () => {\n    return new Promise<void>((resolve) => {\n      const existingScript = document.querySelector('script[src=\"https://www.youtube.com/iframe_api\"]');\n      if (existingScript) {\n        if ((window as any).YT && (window as any).YT.Player) {\n          resolve();\n          return;\n        }\n      }\n\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.async = true;\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag);\n\n      (window as any).onYouTubeIframeAPIReady = () => {\n        resolve();\n      };\n    });\n  };\n\n  const initializePlayer = async (videoId?: string, shouldAutoplay: boolean = false) => {\n    try {\n      await loadYouTubeAPI();\n      \n      if (!(window as any).YT?.Player) {\n        setError('API do YouTube não está disponível');\n        return null;\n      }\n\n      if (player) {\n        try {\n          player.destroy();\n        } catch (e) {\n          console.error('Erro ao destruir player existente:', e);\n        }\n        setPlayer(null);\n      }\n\n      const playerContainer = document.getElementById('youtube-player');\n      if (!playerContainer) {\n        setError('Container do player não encontrado');\n        return null;\n      }\n\n      while (playerContainer.firstChild) {\n        playerContainer.removeChild(playerContainer.firstChild);\n      }\n\n      const newPlayer = new (window as any).YT.Player('youtube-player', {\n        height: '100%',\n        width: '100%',\n        videoId: videoId,\n        playerVars: {\n          autoplay: shouldAutoplay ? 1 : 0,\n          controls: 1,\n          rel: 0,\n        },\n        events: {\n          onReady: () => {\n            setIsPlayerReady(true);\n            if (shouldAutoplay) {\n              try {\n                newPlayer.playVideo();\n                updatePlayingState(true);\n              } catch (error) {\n                console.error('Erro ao iniciar reprodução:', error);\n                updatePlayingState(false);\n              }\n            }\n          },\n          onStateChange: (event: any) => {\n            try {\n              if (event.data === (window as any).YT.PlayerState.ENDED) {\n                updatePlayingState(false);\n                onEnded?.();\n              } else if (event.data === (window as any).YT.PlayerState.PLAYING) {\n                updatePlayingState(true);\n              } else if (event.data === (window as any).YT.PlayerState.PAUSED) {\n                updatePlayingState(false);\n              }\n            } catch (error) {\n              console.error('Erro ao processar mudança de estado:', error);\n              updatePlayingState(false);\n            }\n          },\n          onError: (error: any) => {\n            console.error('Erro no player do YouTube:', error);\n            setError('Erro ao carregar o vídeo');\n            updatePlayingState(false);\n          }\n        }\n      });\n\n      setPlayer(newPlayer);\n      return newPlayer;\n    } catch (error) {\n      console.error('Erro ao inicializar player:', error);\n      setError('Erro ao inicializar o player de vídeo');\n      updatePlayingState(false);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    if (selectedVideo || videos[0]) {\n      const videoId = extractVideoId(selectedVideo?.url || videos[0]?.url);\n      if (videoId) {\n        initializePlayer(videoId, shouldAutoplay);\n      }\n    }\n\n    return () => {\n      if (player) {\n        try {\n          player.destroy();\n          setPlayer(null);\n          setIsPlayerReady(false);\n        } catch (error) {\n          console.error('Erro ao destruir player:', error);\n        }\n      }\n    };\n  }, [selectedVideo?.url, videos[0]?.url]);\n\n  return (\n    <div className=\"flex flex-col md:flex-row h-full\">\n      <div className=\"flex-1 p-4\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <button\n            onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n            className=\"flex items-center space-x-2 text-white hover:text-gray-300\"\n          >\n            <svg\n              className=\"w-4 h-4\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M4 6h16M4 12h16M4 18h16\"\n              />\n            </svg>\n            <span>Últimos Vídeos</span>\n          </button>\n        </div>\n\n        <div className=\"rounded-lg overflow-hidden border border-[#404040]\">\n          <div className=\"relative pt-[56.25%]\">\n            <div\n              id=\"youtube-player\"\n              className=\"absolute top-0 left-0 w-full h-full\"\n            />\n          </div>\n        </div>\n        \n        {error && (\n          <div className=\"mt-4 p-4 bg-red-500 text-white rounded\">\n            {error}\n          </div>\n        )}\n      </div>\n\n      <VideoSidebar\n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        videos={videos}\n        onVideoSelect={handleVideoSelect}\n        setIsPlaying={setIsPlaying}\n      />\n    </div>\n  );\n};\n\nexport default VideoPlayer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}