{"ast":null,"code":"import { supabase } from './supabase';\nexport const authService = {\n  async signIn(username, password) {\n    if (!username || !password) return null;\n    try {\n      console.log('Tentando login com:', {\n        username\n      });\n      const {\n        data,\n        error\n      } = await supabase.rpc('check_password', {\n        p_username: username,\n        p_password: password\n      });\n      console.log('Resposta do Supabase:', {\n        data,\n        error\n      });\n      if (error) {\n        console.error('Erro na autenticação:', error);\n        throw error;\n      }\n      if (data && data.length > 0) {\n        const user = data[0];\n        console.log('Usuário encontrado:', {\n          ...user,\n          password: '[REDACTED]'\n        });\n        localStorage.setItem('user', JSON.stringify(user));\n        return user;\n      }\n      console.log('Nenhum usuário encontrado');\n      return null;\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const userData = localStorage.getItem('user');\n      if (!userData) return null;\n      const user = JSON.parse(userData);\n\n      // Usa RPC em vez de consulta direta\n      const {\n        data,\n        error\n      } = await supabase.rpc('get_user_data', {\n        p_username: user.username\n      });\n      if (error || !data) {\n        console.error('Erro ao buscar usuário:', error);\n        localStorage.removeItem('user');\n        return null;\n      }\n\n      // Atualiza o localStorage com os dados mais recentes\n      localStorage.setItem('user', JSON.stringify(data));\n      return data;\n    } catch (error) {\n      console.error('Erro ao obter usuário atual:', error);\n      localStorage.removeItem('user');\n      return null;\n    }\n  },\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n  async changePassword(username, oldPassword, newPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('change_password', {\n      p_username: username,\n      p_old_password: oldPassword,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateUsername(currentUsername, newUsername, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_username', {\n      p_current_username: currentUsername,\n      p_new_username: newUsername,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateDisplayName(username, newDisplayName, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_display_name', {\n      p_username: username,\n      p_display_name: newDisplayName,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  }\n};","map":{"version":3,"names":["supabase","authService","signIn","username","password","console","log","data","error","rpc","p_username","p_password","length","user","localStorage","setItem","JSON","stringify","getCurrentUser","userData","getItem","parse","removeItem","signOut","changePassword","oldPassword","newPassword","p_old_password","p_new_password","updateUsername","currentUsername","newUsername","adminPassword","p_current_username","p_new_username","p_admin_password","updateDisplayName","newDisplayName","p_display_name"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/auth.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { User } from '../types/auth';\r\n\r\nexport const authService = {\r\n  async signIn(username: string, password: string): Promise<User | null> {\r\n    if (!username || !password) return null;\r\n\r\n    try {\r\n      console.log('Tentando login com:', { username });\r\n\r\n      const { data, error } = await supabase\r\n        .rpc('check_password', {\r\n          p_username: username,\r\n          p_password: password\r\n        });\r\n\r\n      console.log('Resposta do Supabase:', { data, error });\r\n\r\n      if (error) {\r\n        console.error('Erro na autenticação:', error);\r\n        throw error;\r\n      }\r\n      \r\n      if (data && data.length > 0) {\r\n        const user = data[0];\r\n        console.log('Usuário encontrado:', { ...user, password: '[REDACTED]' });\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        return user;\r\n      }\r\n\r\n      console.log('Nenhum usuário encontrado');\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Erro ao fazer login:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    try {\r\n      const userData = localStorage.getItem('user');\r\n      if (!userData) return null;\r\n\r\n      const user = JSON.parse(userData);\r\n      \r\n      // Usa RPC em vez de consulta direta\r\n      const { data, error } = await supabase\r\n        .rpc('get_user_data', {\r\n          p_username: user.username\r\n        });\r\n\r\n      if (error || !data) {\r\n        console.error('Erro ao buscar usuário:', error);\r\n        localStorage.removeItem('user');\r\n        return null;\r\n      }\r\n\r\n      // Atualiza o localStorage com os dados mais recentes\r\n      localStorage.setItem('user', JSON.stringify(data));\r\n      return data;\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao obter usuário atual:', error);\r\n      localStorage.removeItem('user');\r\n      return null;\r\n    }\r\n  },\r\n\r\n  async signOut() {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  async changePassword(username: string, oldPassword: string, newPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('change_password', {\r\n        p_username: username,\r\n        p_old_password: oldPassword,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateUsername(currentUsername: string, newUsername: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_username', {\r\n        p_current_username: currentUsername,\r\n        p_new_username: newUsername,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateDisplayName(username: string, newDisplayName: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_display_name', {\r\n        p_username: username,\r\n        p_display_name: newDisplayName,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}