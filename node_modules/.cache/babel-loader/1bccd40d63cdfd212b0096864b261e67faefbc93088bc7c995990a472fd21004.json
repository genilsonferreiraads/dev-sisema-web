{"ast":null,"code":"import { supabase } from './supabase';\nexport const authService = {\n  async signIn(username, password) {\n    if (!username || !password) return null;\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('check_password', {\n        p_username: username,\n        p_password: password\n      });\n      if (error) {\n        console.error('Sign in error:', error);\n        throw new Error('Erro ao fazer login. Por favor, tente novamente.');\n      }\n      if (!data || !Array.isArray(data) || data.length === 0) {\n        return null;\n      }\n      const user = data[0];\n      if (!(user !== null && user !== void 0 && user.id) || !(user !== null && user !== void 0 && user.username) || !(user !== null && user !== void 0 && user.role)) {\n        console.error('Invalid user data received:', user);\n        throw new Error('Dados de usuário inválidos recebidos do servidor');\n      }\n      const userData = {\n        id: user.id,\n        username: user.username,\n        full_name: user.full_name || '',\n        role: user.role,\n        display_name: user.display_name || user.username\n      };\n      localStorage.setItem('user', JSON.stringify(userData));\n      return userData;\n    } catch (error) {\n      console.error('Sign in process error:', error);\n      throw error instanceof Error ? error : new Error('Erro desconhecido ao fazer login');\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) return null;\n      const currentUser = JSON.parse(storedUser);\n      const {\n        data,\n        error\n      } = await supabase.rpc('get_user_data', {\n        p_username: currentUser.username\n      });\n      if (error || !data) {\n        console.error('Erro ao buscar usuário:', error);\n        localStorage.removeItem('user');\n        return null;\n      }\n\n      // Garante que retornamos um objeto único, não um array\n      const updatedUser = Array.isArray(data) ? data[0] : data;\n\n      // Atualiza o localStorage com os dados mais recentes\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return updatedUser;\n    } catch (error) {\n      console.error('Erro ao obter usuário atual:', error);\n      localStorage.removeItem('user');\n      return null;\n    }\n  },\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n  async changePassword(username, adminPassword, newPassword) {\n    try {\n      if (!username || !adminPassword || !newPassword) {\n        console.error('Dados inválidos:', {\n          hasUsername: !!username,\n          hasAdminPassword: !!adminPassword,\n          hasNewPassword: !!newPassword\n        });\n        throw new Error('Todos os campos são obrigatórios');\n      }\n\n      // Pega o usuário atual do localStorage\n      const currentUser = localStorage.getItem('user');\n      if (!currentUser) {\n        throw new Error('Usuário não autenticado');\n      }\n      const user = JSON.parse(currentUser);\n      console.log('Usuário atual:', {\n        username: user.username,\n        role: user.role\n      });\n      console.log('Tentando alterar senha para usuário:', username);\n      console.log('Chamando change_password com:', {\n        username,\n        adminPassword,\n        newPassword\n      });\n      const {\n        data,\n        error\n      } = await supabase.rpc('change_password', {\n        p_username: username,\n        p_admin_password: adminPassword,\n        p_new_password: newPassword\n      });\n      console.log('Resposta do change_password:', {\n        data,\n        error\n      });\n      if (error) {\n        console.error('Erro ao alterar senha:', error);\n        throw error;\n      }\n      return data || false;\n    } catch (error) {\n      console.error('Erro ao alterar senha:', error);\n      throw error;\n    }\n  },\n  async updateUsername(currentUsername, newUsername, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_username', {\n      p_current_username: currentUsername,\n      p_new_username: newUsername,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateDisplayName(username, newDisplayName, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_display_name', {\n      p_username: username,\n      p_display_name: newDisplayName,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async listUsers() {\n    try {\n      console.log('Chamando list_users no Supabase...');\n      const {\n        data,\n        error\n      } = await supabase.rpc('list_users');\n      console.log('Resposta do list_users:', {\n        data,\n        error\n      });\n      if (error) {\n        console.error('Erro ao listar usuários:', error);\n        throw error;\n      }\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao listar usuários:', error);\n      throw error;\n    }\n  },\n  async updateUserCredentials(username, newUsername, newPassword) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.rpc('update_user_credentials', {\n        p_username: username,\n        p_new_username: newUsername,\n        p_new_password: newPassword\n      });\n      if (error) {\n        console.error('Erro ao atualizar credenciais do usuário:', error);\n        throw error;\n      }\n      return data || false;\n    } catch (error) {\n      console.error('Erro ao atualizar credenciais do usuário:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","authService","signIn","username","password","data","error","rpc","p_username","p_password","console","Error","Array","isArray","length","user","id","role","userData","full_name","display_name","localStorage","setItem","JSON","stringify","getCurrentUser","storedUser","getItem","currentUser","parse","removeItem","updatedUser","signOut","changePassword","adminPassword","newPassword","hasUsername","hasAdminPassword","hasNewPassword","log","p_admin_password","p_new_password","updateUsername","currentUsername","newUsername","p_current_username","p_new_username","updateDisplayName","newDisplayName","p_display_name","listUsers","updateUserCredentials"],"sources":["C:/Users/genil/Desktop/sistema da imperio/src/lib/auth.ts"],"sourcesContent":["import { supabase } from './supabase';\nimport { User, UserListItem } from '../types/auth';\n\nexport const authService = {\n  async signIn(username: string, password: string): Promise<User | null> {\n    if (!username || !password) return null;\n\n    try {\n      const { data, error } = await supabase\n        .rpc('check_password', {\n          p_username: username,\n          p_password: password\n        });\n\n      if (error) {\n        console.error('Sign in error:', error);\n        throw new Error('Erro ao fazer login. Por favor, tente novamente.');\n      }\n      \n      if (!data || !Array.isArray(data) || data.length === 0) {\n        return null;\n      }\n\n      const user = data[0];\n      \n      if (!user?.id || !user?.username || !user?.role) {\n        console.error('Invalid user data received:', user);\n        throw new Error('Dados de usuário inválidos recebidos do servidor');\n      }\n        \n      const userData: User = {\n        id: user.id,\n        username: user.username,\n        full_name: user.full_name || '',\n        role: user.role,\n        display_name: user.display_name || user.username\n      };\n      \n      localStorage.setItem('user', JSON.stringify(userData));\n      return userData;\n\n    } catch (error) {\n      console.error('Sign in process error:', error);\n      throw error instanceof Error ? error : new Error('Erro desconhecido ao fazer login');\n    }\n  },\n\n  async getCurrentUser(): Promise<User | null> {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) return null;\n\n      const currentUser = JSON.parse(storedUser) as User;\n      \n      const { data, error } = await supabase\n        .rpc('get_user_data', {\n          p_username: currentUser.username\n        });\n\n      if (error || !data) {\n        console.error('Erro ao buscar usuário:', error);\n        localStorage.removeItem('user');\n        return null;\n      }\n\n      // Garante que retornamos um objeto único, não um array\n      const updatedUser: User = Array.isArray(data) ? data[0] : data;\n      \n      // Atualiza o localStorage com os dados mais recentes\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return updatedUser;\n\n    } catch (error) {\n      console.error('Erro ao obter usuário atual:', error);\n      localStorage.removeItem('user');\n      return null;\n    }\n  },\n\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n\n  async changePassword(username: string, adminPassword: string, newPassword: string): Promise<boolean> {\n    try {\n      if (!username || !adminPassword || !newPassword) {\n        console.error('Dados inválidos:', { \n          hasUsername: !!username, \n          hasAdminPassword: !!adminPassword, \n          hasNewPassword: !!newPassword \n        });\n        throw new Error('Todos os campos são obrigatórios');\n      }\n\n      // Pega o usuário atual do localStorage\n      const currentUser = localStorage.getItem('user');\n      if (!currentUser) {\n        throw new Error('Usuário não autenticado');\n      }\n\n      const user = JSON.parse(currentUser);\n      console.log('Usuário atual:', { username: user.username, role: user.role });\n\n      console.log('Tentando alterar senha para usuário:', username);\n      \n      console.log('Chamando change_password com:', {\n        username,\n        adminPassword,\n        newPassword\n      });\n\n      const { data, error } = await supabase\n        .rpc('change_password', {\n          p_username: username,\n          p_admin_password: adminPassword,\n          p_new_password: newPassword\n        });\n\n      console.log('Resposta do change_password:', { data, error });\n\n      if (error) {\n        console.error('Erro ao alterar senha:', error);\n        throw error;\n      }\n\n      return data || false;\n    } catch (error) {\n      console.error('Erro ao alterar senha:', error);\n      throw error;\n    }\n  },\n\n  async updateUsername(currentUsername: string, newUsername: string, adminPassword: string): Promise<boolean> {\n    const { data, error } = await supabase\n      .rpc('update_username', {\n        p_current_username: currentUsername,\n        p_new_username: newUsername,\n        p_admin_password: adminPassword\n      });\n\n    if (error) throw error;\n    return data || false;\n  },\n\n  async updateDisplayName(username: string, newDisplayName: string, adminPassword: string): Promise<boolean> {\n    const { data, error } = await supabase\n      .rpc('update_display_name', {\n        p_username: username,\n        p_display_name: newDisplayName,\n        p_admin_password: adminPassword\n      });\n\n    if (error) throw error;\n    return data || false;\n  },\n\n  async listUsers(): Promise<UserListItem[]> {\n    try {\n      console.log('Chamando list_users no Supabase...');\n      const { data, error } = await supabase\n        .rpc('list_users');\n\n      console.log('Resposta do list_users:', { data, error });\n\n      if (error) {\n        console.error('Erro ao listar usuários:', error);\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao listar usuários:', error);\n      throw error;\n    }\n  },\n\n  async updateUserCredentials(username: string, newUsername: string | null, newPassword: string | null): Promise<boolean> {\n    try {\n      const { data, error } = await supabase\n        .rpc('update_user_credentials', {\n          p_username: username,\n          p_new_username: newUsername,\n          p_new_password: newPassword\n        });\n\n      if (error) {\n        console.error('Erro ao atualizar credenciais do usuário:', error);\n        throw error;\n      }\n\n      return data || false;\n    } catch (error) {\n      console.error('Erro ao atualizar credenciais do usuário:', error);\n      throw error;\n    }\n  }\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AAGrC,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,MAAMA,CAACC,QAAgB,EAAEC,QAAgB,EAAwB;IACrE,IAAI,CAACD,QAAQ,IAAI,CAACC,QAAQ,EAAE,OAAO,IAAI;IAEvC,IAAI;MACF,MAAM;QAAEC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,gBAAgB,EAAE;QACrBC,UAAU,EAAEL,QAAQ;QACpBM,UAAU,EAAEL;MACd,CAAC,CAAC;MAEJ,IAAIE,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtC,MAAM,IAAIK,KAAK,CAAC,kDAAkD,CAAC;MACrE;MAEA,IAAI,CAACN,IAAI,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,IAAI,CAAC,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,EAAE;QACtD,OAAO,IAAI;MACb;MAEA,MAAMC,IAAI,GAAGV,IAAI,CAAC,CAAC,CAAC;MAEpB,IAAI,EAACU,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEC,EAAE,KAAI,EAACD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEZ,QAAQ,KAAI,EAACY,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,IAAI,GAAE;QAC/CP,OAAO,CAACJ,KAAK,CAAC,6BAA6B,EAAES,IAAI,CAAC;QAClD,MAAM,IAAIJ,KAAK,CAAC,kDAAkD,CAAC;MACrE;MAEA,MAAMO,QAAc,GAAG;QACrBF,EAAE,EAAED,IAAI,CAACC,EAAE;QACXb,QAAQ,EAAEY,IAAI,CAACZ,QAAQ;QACvBgB,SAAS,EAAEJ,IAAI,CAACI,SAAS,IAAI,EAAE;QAC/BF,IAAI,EAAEF,IAAI,CAACE,IAAI;QACfG,YAAY,EAAEL,IAAI,CAACK,YAAY,IAAIL,IAAI,CAACZ;MAC1C,CAAC;MAEDkB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;MACtD,OAAOA,QAAQ;IAEjB,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK,YAAYK,KAAK,GAAGL,KAAK,GAAG,IAAIK,KAAK,CAAC,kCAAkC,CAAC;IACtF;EACF,CAAC;EAED,MAAMc,cAAcA,CAAA,EAAyB;IAC3C,IAAI;MACF,MAAMC,UAAU,GAAGL,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC;MAC/C,IAAI,CAACD,UAAU,EAAE,OAAO,IAAI;MAE5B,MAAME,WAAW,GAAGL,IAAI,CAACM,KAAK,CAACH,UAAU,CAAS;MAElD,MAAM;QAAErB,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,eAAe,EAAE;QACpBC,UAAU,EAAEoB,WAAW,CAACzB;MAC1B,CAAC,CAAC;MAEJ,IAAIG,KAAK,IAAI,CAACD,IAAI,EAAE;QAClBK,OAAO,CAACJ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/Ce,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;QAC/B,OAAO,IAAI;MACb;;MAEA;MACA,MAAMC,WAAiB,GAAGnB,KAAK,CAACC,OAAO,CAACR,IAAI,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI;;MAE9D;MACAgB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACO,WAAW,CAAC,CAAC;MACzD,OAAOA,WAAW;IAEpB,CAAC,CAAC,OAAOzB,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDe,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;MAC/B,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAME,OAAOA,CAAA,EAAG;IACdX,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,MAAMG,cAAcA,CAAC9B,QAAgB,EAAE+B,aAAqB,EAAEC,WAAmB,EAAoB;IACnG,IAAI;MACF,IAAI,CAAChC,QAAQ,IAAI,CAAC+B,aAAa,IAAI,CAACC,WAAW,EAAE;QAC/CzB,OAAO,CAACJ,KAAK,CAAC,kBAAkB,EAAE;UAChC8B,WAAW,EAAE,CAAC,CAACjC,QAAQ;UACvBkC,gBAAgB,EAAE,CAAC,CAACH,aAAa;UACjCI,cAAc,EAAE,CAAC,CAACH;QACpB,CAAC,CAAC;QACF,MAAM,IAAIxB,KAAK,CAAC,kCAAkC,CAAC;MACrD;;MAEA;MACA,MAAMiB,WAAW,GAAGP,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC;MAChD,IAAI,CAACC,WAAW,EAAE;QAChB,MAAM,IAAIjB,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAMI,IAAI,GAAGQ,IAAI,CAACM,KAAK,CAACD,WAAW,CAAC;MACpClB,OAAO,CAAC6B,GAAG,CAAC,gBAAgB,EAAE;QAAEpC,QAAQ,EAAEY,IAAI,CAACZ,QAAQ;QAAEc,IAAI,EAAEF,IAAI,CAACE;MAAK,CAAC,CAAC;MAE3EP,OAAO,CAAC6B,GAAG,CAAC,sCAAsC,EAAEpC,QAAQ,CAAC;MAE7DO,OAAO,CAAC6B,GAAG,CAAC,+BAA+B,EAAE;QAC3CpC,QAAQ;QACR+B,aAAa;QACbC;MACF,CAAC,CAAC;MAEF,MAAM;QAAE9B,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,iBAAiB,EAAE;QACtBC,UAAU,EAAEL,QAAQ;QACpBqC,gBAAgB,EAAEN,aAAa;QAC/BO,cAAc,EAAEN;MAClB,CAAC,CAAC;MAEJzB,OAAO,CAAC6B,GAAG,CAAC,8BAA8B,EAAE;QAAElC,IAAI;QAAEC;MAAM,CAAC,CAAC;MAE5D,IAAIA,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,MAAMA,KAAK;MACb;MAEA,OAAOD,IAAI,IAAI,KAAK;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMoC,cAAcA,CAACC,eAAuB,EAAEC,WAAmB,EAAEV,aAAqB,EAAoB;IAC1G,MAAM;MAAE7B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,iBAAiB,EAAE;MACtBsC,kBAAkB,EAAEF,eAAe;MACnCG,cAAc,EAAEF,WAAW;MAC3BJ,gBAAgB,EAAEN;IACpB,CAAC,CAAC;IAEJ,IAAI5B,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,IAAI,KAAK;EACtB,CAAC;EAED,MAAM0C,iBAAiBA,CAAC5C,QAAgB,EAAE6C,cAAsB,EAAEd,aAAqB,EAAoB;IACzG,MAAM;MAAE7B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,qBAAqB,EAAE;MAC1BC,UAAU,EAAEL,QAAQ;MACpB8C,cAAc,EAAED,cAAc;MAC9BR,gBAAgB,EAAEN;IACpB,CAAC,CAAC;IAEJ,IAAI5B,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI,IAAI,KAAK;EACtB,CAAC;EAED,MAAM6C,SAASA,CAAA,EAA4B;IACzC,IAAI;MACFxC,OAAO,CAAC6B,GAAG,CAAC,oCAAoC,CAAC;MACjD,MAAM;QAAElC,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,YAAY,CAAC;MAEpBG,OAAO,CAAC6B,GAAG,CAAC,yBAAyB,EAAE;QAAElC,IAAI;QAAEC;MAAM,CAAC,CAAC;MAEvD,IAAIA,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,MAAMA,KAAK;MACb;MAEA,OAAOD,IAAI,IAAI,EAAE;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAM6C,qBAAqBA,CAAChD,QAAgB,EAAEyC,WAA0B,EAAET,WAA0B,EAAoB;IACtH,IAAI;MACF,MAAM;QAAE9B,IAAI;QAAEC;MAAM,CAAC,GAAG,MAAMN,QAAQ,CACnCO,GAAG,CAAC,yBAAyB,EAAE;QAC9BC,UAAU,EAAEL,QAAQ;QACpB2C,cAAc,EAAEF,WAAW;QAC3BH,cAAc,EAAEN;MAClB,CAAC,CAAC;MAEJ,IAAI7B,KAAK,EAAE;QACTI,OAAO,CAACJ,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;QACjE,MAAMA,KAAK;MACb;MAEA,OAAOD,IAAI,IAAI,KAAK;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}