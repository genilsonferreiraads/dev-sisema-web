{"ast":null,"code":"import { supabase } from './supabase';\nexport const authService = {\n  async signIn(username, password) {\n    if (!username || !password) return null;\n    try {\n      console.log('Tentando login com:', {\n        username\n      });\n      const {\n        data,\n        error\n      } = await supabase.rpc('check_password', {\n        p_username: username,\n        p_password: password\n      });\n      console.log('Resposta do Supabase:', {\n        data,\n        error\n      });\n      if (error) {\n        console.error('Erro na autenticação:', error);\n        throw error;\n      }\n      if (data && Array.isArray(data) && data.length > 0) {\n        const user = data[0];\n        console.log('Usuário encontrado:', {\n          ...user,\n          password: '[REDACTED]'\n        });\n\n        // Armazena apenas os dados necessários\n        const userData = {\n          id: user.id,\n          username: user.username,\n          full_name: user.full_name,\n          role: user.role,\n          display_name: user.display_name\n        };\n        localStorage.setItem('user', JSON.stringify(userData));\n        return userData;\n      }\n      console.log('Nenhum usuário encontrado');\n      return null;\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    }\n  },\n  async getCurrentUser() {\n    try {\n      const storedUser = localStorage.getItem('user');\n      if (!storedUser) return null;\n      const currentUser = JSON.parse(storedUser);\n      const {\n        data,\n        error\n      } = await supabase.rpc('get_user_data', {\n        p_username: currentUser.username\n      });\n      if (error || !data) {\n        console.error('Erro ao buscar usuário:', error);\n        localStorage.removeItem('user');\n        return null;\n      }\n\n      // Garante que retornamos um objeto único, não um array\n      const updatedUser = Array.isArray(data) ? data[0] : data;\n\n      // Atualiza o localStorage com os dados mais recentes\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return updatedUser;\n    } catch (error) {\n      console.error('Erro ao obter usuário atual:', error);\n      localStorage.removeItem('user');\n      return null;\n    }\n  },\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n  async changePassword(username, oldPassword, newPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('change_password', {\n      p_username: username,\n      p_old_password: oldPassword,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateUsername(currentUsername, newUsername, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_username', {\n      p_current_username: currentUsername,\n      p_new_username: newUsername,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateDisplayName(username, newDisplayName, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_display_name', {\n      p_username: username,\n      p_display_name: newDisplayName,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async listUsers() {\n    const {\n      data,\n      error\n    } = await supabase.rpc('list_users');\n    if (error) throw error;\n    return data || [];\n  }\n};","map":{"version":3,"names":["supabase","authService","signIn","username","password","console","log","data","error","rpc","p_username","p_password","Array","isArray","length","user","userData","id","full_name","role","display_name","localStorage","setItem","JSON","stringify","getCurrentUser","storedUser","getItem","currentUser","parse","removeItem","updatedUser","signOut","changePassword","oldPassword","newPassword","p_old_password","p_new_password","updateUsername","currentUsername","newUsername","adminPassword","p_current_username","p_new_username","p_admin_password","updateDisplayName","newDisplayName","p_display_name","listUsers"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/auth.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { User, UserListItem } from '../types/auth';\r\n\r\nexport const authService = {\r\n  async signIn(username: string, password: string): Promise<User | null> {\r\n    if (!username || !password) return null;\r\n\r\n    try {\r\n      console.log('Tentando login com:', { username });\r\n\r\n      const { data, error } = await supabase\r\n        .rpc('check_password', {\r\n          p_username: username,\r\n          p_password: password\r\n        });\r\n\r\n      console.log('Resposta do Supabase:', { data, error });\r\n\r\n      if (error) {\r\n        console.error('Erro na autenticação:', error);\r\n        throw error;\r\n      }\r\n      \r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n        const user = data[0];\r\n        console.log('Usuário encontrado:', { ...user, password: '[REDACTED]' });\r\n        \r\n        // Armazena apenas os dados necessários\r\n        const userData: User = {\r\n          id: user.id,\r\n          username: user.username,\r\n          full_name: user.full_name,\r\n          role: user.role,\r\n          display_name: user.display_name\r\n        };\r\n        \r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return userData;\r\n      }\r\n\r\n      console.log('Nenhum usuário encontrado');\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Erro ao fazer login:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    try {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (!storedUser) return null;\r\n\r\n      const currentUser = JSON.parse(storedUser) as User;\r\n      \r\n      const { data, error } = await supabase\r\n        .rpc('get_user_data', {\r\n          p_username: currentUser.username\r\n        });\r\n\r\n      if (error || !data) {\r\n        console.error('Erro ao buscar usuário:', error);\r\n        localStorage.removeItem('user');\r\n        return null;\r\n      }\r\n\r\n      // Garante que retornamos um objeto único, não um array\r\n      const updatedUser: User = Array.isArray(data) ? data[0] : data;\r\n      \r\n      // Atualiza o localStorage com os dados mais recentes\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      return updatedUser;\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao obter usuário atual:', error);\r\n      localStorage.removeItem('user');\r\n      return null;\r\n    }\r\n  },\r\n\r\n  async signOut() {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  async changePassword(username: string, oldPassword: string, newPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('change_password', {\r\n        p_username: username,\r\n        p_old_password: oldPassword,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateUsername(currentUsername: string, newUsername: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_username', {\r\n        p_current_username: currentUsername,\r\n        p_new_username: newUsername,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateDisplayName(username: string, newDisplayName: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_display_name', {\r\n        p_username: username,\r\n        p_display_name: newDisplayName,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async listUsers(): Promise<UserListItem[]> {\r\n    const { data, error } = await supabase\r\n      .rpc('list_users');\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}