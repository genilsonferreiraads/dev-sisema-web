{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Faltam variáveis de ambiente do Supabase');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\nexport const audioService = {\n  getAudios: async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  },\n  addAudio: async audio => {\n    console.log('Tentando adicionar áudio com dados:', audio);\n    const {\n      data,\n      error\n    } = await supabase.from('audios').insert([{\n      title: audio.title,\n      url: audio.url,\n      auto_repeat: false,\n      repeat_interval: 0,\n      play_count: 0\n    }]).select().single();\n    if (error) {\n      console.error('Erro ao adicionar áudio:', error);\n      throw error;\n    }\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n    return data;\n  },\n  deleteAudio: async id => {\n    const {\n      error\n    } = await supabase.from('audios').delete().eq('id', id);\n    if (error) throw error;\n  },\n  updateAudio: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  updatePreferences: async (audioId, preferences) => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(preferences).eq('id', audioId).select().single();\n    if (error) throw error;\n    return data;\n  },\n  loadPreferences: async audioId => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('auto_repeat, repeat_interval, last_played_at, play_count, timer_end_at').eq('id', audioId).single();\n    if (error) throw error;\n    return data;\n  },\n  getAudio: async audioId => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').eq('id', audioId).single();\n    if (error) {\n      console.error('Erro ao buscar áudio:', error);\n      return null;\n    }\n    return data;\n  }\n};\nexport const videoService = {\n  async updateVideoOrder(videoId) {\n    try {\n      // Primeiro, pega a ordem atual de todos os vídeos\n      const {\n        data: allVideos\n      } = await supabase.from('videos').select('id, play_order').order('play_order', {\n        ascending: false\n      });\n      if (!allVideos) return;\n\n      // Incrementa a ordem de todos os vídeos que estão acima do vídeo selecionado\n      for (const video of allVideos) {\n        if (video.id !== videoId) {\n          await supabase.from('videos').update({\n            play_order: (video.play_order || 0) + 1\n          }).eq('id', video.id);\n        }\n      }\n\n      // Coloca o vídeo selecionado na primeira posição (ordem 1)\n      const {\n        error\n      } = await supabase.from('videos').update({\n        play_order: 1,\n        last_played: new Date().toISOString()\n      }).eq('id', videoId);\n      if (error) throw error;\n    } catch (error) {\n      console.error('Erro ao atualizar ordem do vídeo:', error);\n      throw error;\n    }\n  },\n  async getRecentVideos() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('videos').select('*').order('play_order', {\n        ascending: false\n      }).order('last_played', {\n        ascending: false\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar vídeos:', error);\n      throw error;\n    }\n  },\n  async addVideo(url, title) {\n    try {\n      // Incrementa a ordem de todos os vídeos existentes\n      await supabase.rpc('increment_video_orders');\n\n      // Adiciona o novo vídeo com ordem 1 (primeira posição)\n      const {\n        data,\n        error\n      } = await supabase.from('videos').insert([{\n        url,\n        title,\n        play_order: 1,\n        last_played: new Date().toISOString()\n      }]).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Erro ao adicionar vídeo:', error);\n      throw error;\n    }\n  },\n  async deleteVideo(id) {\n    const {\n      error\n    } = await supabase.from('videos').delete().eq('id', id);\n    if (error) {\n      throw new Error(`Erro ao deletar vídeo: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","audioService","getAudios","data","error","from","select","order","ascending","addAudio","audio","console","log","insert","title","url","auto_repeat","repeat_interval","play_count","single","deleteAudio","id","delete","eq","updateAudio","updates","update","updatePreferences","audioId","preferences","loadPreferences","getAudio","videoService","updateVideoOrder","videoId","allVideos","video","play_order","last_played","Date","toISOString","getRecentVideos","addVideo","rpc","deleteVideo","message"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Faltam variáveis de ambiente do Supabase');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport interface AudioData {\n  id: string;\n  title: string;\n  url: string;\n  created_at: string;\n  auto_repeat: boolean;\n  repeat_interval: number;\n  last_played_at?: string;\n  play_count?: number;\n  timer_end_at?: string;\n}\n\nexport interface VideoData {\n  id: string;\n  url: string;\n  title?: string;\n  created_at: string;\n  play_order?: number;\n  last_played?: string;\n}\n\nexport const audioService = {\n  getAudios: async (): Promise<AudioData[]> => {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('*')\n      .order('created_at', { ascending: false });\n    \n    if (error) throw error;\n    return data || [];\n  },\n\n  addAudio: async (audio: Omit<AudioData, 'id' | 'created_at'>): Promise<AudioData> => {\n    console.log('Tentando adicionar áudio com dados:', audio);\n    \n    const { data, error } = await supabase\n      .from('audios')\n      .insert([{\n        title: audio.title,\n        url: audio.url,\n        auto_repeat: false,\n        repeat_interval: 0,\n        play_count: 0\n      }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Erro ao adicionar áudio:', error);\n      throw error;\n    }\n\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n\n    return data as AudioData;\n  },\n\n  deleteAudio: async (id: string): Promise<void> => {\n    const { error } = await supabase\n      .from('audios')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  updateAudio: async (id: string, updates: Partial<AudioData>): Promise<AudioData> => {\n    const { data, error } = await supabase\n      .from('audios')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as AudioData;\n  },\n\n  updatePreferences: async (audioId: string, preferences: {\n    auto_repeat?: boolean;\n    repeat_interval?: number;\n    last_played_at?: string;\n    play_count?: number;\n    timer_end_at?: string;\n  }): Promise<AudioData> => {\n    const { data, error } = await supabase\n      .from('audios')\n      .update(preferences)\n      .eq('id', audioId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as AudioData;\n  },\n\n  loadPreferences: async (audioId: string): Promise<{\n    auto_repeat: boolean;\n    repeat_interval: number;\n    last_played_at?: string;\n    play_count: number;\n    timer_end_at?: string;\n  }> => {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('auto_repeat, repeat_interval, last_played_at, play_count, timer_end_at')\n      .eq('id', audioId)\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  getAudio: async (audioId: string): Promise<AudioData | null> => {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('*')\n      .eq('id', audioId)\n      .single();\n      \n    if (error) {\n      console.error('Erro ao buscar áudio:', error);\n      return null;\n    }\n    \n    return data;\n  }\n};\n\nexport const videoService = {\n  async updateVideoOrder(videoId: string): Promise<void> {\n    try {\n      // Primeiro, pega a ordem atual de todos os vídeos\n      const { data: allVideos } = await supabase\n        .from('videos')\n        .select('id, play_order')\n        .order('play_order', { ascending: false });\n\n      if (!allVideos) return;\n\n      // Incrementa a ordem de todos os vídeos que estão acima do vídeo selecionado\n      for (const video of allVideos) {\n        if (video.id !== videoId) {\n          await supabase\n            .from('videos')\n            .update({ play_order: (video.play_order || 0) + 1 })\n            .eq('id', video.id);\n        }\n      }\n\n      // Coloca o vídeo selecionado na primeira posição (ordem 1)\n      const { error } = await supabase\n        .from('videos')\n        .update({ \n          play_order: 1,\n          last_played: new Date().toISOString()\n        })\n        .eq('id', videoId);\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Erro ao atualizar ordem do vídeo:', error);\n      throw error;\n    }\n  },\n\n  async getRecentVideos(): Promise<VideoData[]> {\n    try {\n      const { data, error } = await supabase\n        .from('videos')\n        .select('*')\n        .order('play_order', { ascending: false })\n        .order('last_played', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao buscar vídeos:', error);\n      throw error;\n    }\n  },\n\n  async addVideo(url: string, title: string): Promise<VideoData> {\n    try {\n      // Incrementa a ordem de todos os vídeos existentes\n      await supabase.rpc('increment_video_orders');\n\n      // Adiciona o novo vídeo com ordem 1 (primeira posição)\n      const { data, error } = await supabase\n        .from('videos')\n        .insert([\n          { \n            url, \n            title, \n            play_order: 1,\n            last_played: new Date().toISOString()\n          }\n        ])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Erro ao adicionar vídeo:', error);\n      throw error;\n    }\n  },\n\n  async deleteVideo(id: string) {\n    const { error } = await supabase\n      .from('videos')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      throw new Error(`Erro ao deletar vídeo: ${error.message}`);\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}