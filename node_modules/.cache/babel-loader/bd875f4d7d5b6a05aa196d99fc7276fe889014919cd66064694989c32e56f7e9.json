{"ast":null,"code":"import { supabase } from './supabase';\nexport const authService = {\n  async signIn(username, password) {\n    try {\n      // Primeiro, verifica se o usuário existe\n      const {\n        data: users,\n        error: userError\n      } = await supabase.from('users').select('*').eq('username', username).eq('password', password);\n      if (userError) throw userError;\n\n      // Se não encontrou usuário ou encontrou mais de um (não deveria acontecer)\n      if (!users || users.length !== 1) {\n        throw new Error('Credenciais inválidas');\n      }\n      const userData = {\n        id: users[0].id,\n        username: users[0].username,\n        full_name: users[0].full_name,\n        role: users[0].role,\n        display_name: users[0].display_name\n      };\n\n      // Salva no localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      return userData;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(error.message || 'Credenciais inválidas');\n      }\n      throw new Error('Credenciais inválidas');\n    }\n  },\n  async getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  async signOut() {\n    localStorage.removeItem('user');\n  },\n  async changePassword(username, adminPassword, newPassword) {\n    if (!username || !adminPassword || !newPassword) {\n      throw new Error('Todos os campos são obrigatórios');\n    }\n    const {\n      data,\n      error\n    } = await supabase.rpc('change_password', {\n      p_username: username,\n      p_admin_password: adminPassword,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateUsername(currentUsername, newUsername, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_username', {\n      p_current_username: currentUsername,\n      p_new_username: newUsername,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async updateDisplayName(username, newDisplayName, adminPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_display_name', {\n      p_username: username,\n      p_display_name: newDisplayName,\n      p_admin_password: adminPassword\n    });\n    if (error) throw error;\n    return data || false;\n  },\n  async listUsers() {\n    const {\n      data,\n      error\n    } = await supabase.rpc('list_users');\n    if (error) throw error;\n    return data || [];\n  },\n  async updateUserCredentials(username, newUsername, newPassword) {\n    const {\n      data,\n      error\n    } = await supabase.rpc('update_user_credentials', {\n      p_username: username,\n      p_new_username: newUsername,\n      p_new_password: newPassword\n    });\n    if (error) throw error;\n    return data || false;\n  }\n};","map":{"version":3,"names":["supabase","authService","signIn","username","password","data","users","error","userError","from","select","eq","length","Error","userData","id","full_name","role","display_name","localStorage","setItem","JSON","stringify","message","getCurrentUser","userStr","getItem","parse","signOut","removeItem","changePassword","adminPassword","newPassword","rpc","p_username","p_admin_password","p_new_password","updateUsername","currentUsername","newUsername","p_current_username","p_new_username","updateDisplayName","newDisplayName","p_display_name","listUsers","updateUserCredentials"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/auth.ts"],"sourcesContent":["import { supabase } from './supabase';\r\nimport { User, UserListItem } from '../types/auth';\r\n\r\nexport const authService = {\r\n  async signIn(username: string, password: string): Promise<User | null> {\r\n    try {\r\n      // Primeiro, verifica se o usuário existe\r\n      const { data: users, error: userError } = await supabase\r\n        .from('users')\r\n        .select('*')\r\n        .eq('username', username)\r\n        .eq('password', password);\r\n\r\n      if (userError) throw userError;\r\n\r\n      // Se não encontrou usuário ou encontrou mais de um (não deveria acontecer)\r\n      if (!users || users.length !== 1) {\r\n        throw new Error('Credenciais inválidas');\r\n      }\r\n\r\n      const userData: User = {\r\n        id: users[0].id,\r\n        username: users[0].username,\r\n        full_name: users[0].full_name,\r\n        role: users[0].role,\r\n        display_name: users[0].display_name\r\n      };\r\n\r\n      // Salva no localStorage\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      return userData;\r\n\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw new Error(error.message || 'Credenciais inválidas');\r\n      }\r\n      throw new Error('Credenciais inválidas');\r\n    }\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  },\r\n\r\n  async signOut(): Promise<void> {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  async changePassword(username: string, adminPassword: string, newPassword: string): Promise<boolean> {\r\n    if (!username || !adminPassword || !newPassword) {\r\n      throw new Error('Todos os campos são obrigatórios');\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .rpc('change_password', {\r\n        p_username: username,\r\n        p_admin_password: adminPassword,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateUsername(currentUsername: string, newUsername: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_username', {\r\n        p_current_username: currentUsername,\r\n        p_new_username: newUsername,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async updateDisplayName(username: string, newDisplayName: string, adminPassword: string): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_display_name', {\r\n        p_username: username,\r\n        p_display_name: newDisplayName,\r\n        p_admin_password: adminPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  },\r\n\r\n  async listUsers(): Promise<UserListItem[]> {\r\n    const { data, error } = await supabase\r\n      .rpc('list_users');\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  async updateUserCredentials(username: string, newUsername: string | null, newPassword: string | null): Promise<boolean> {\r\n    const { data, error } = await supabase\r\n      .rpc('update_user_credentials', {\r\n        p_username: username,\r\n        p_new_username: newUsername,\r\n        p_new_password: newPassword\r\n      });\r\n\r\n    if (error) throw error;\r\n    return data || false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}