{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Faltam variáveis de ambiente do Supabase');\n}\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\nexport const audioService = {\n  async getAudios() {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Erro ao buscar áudios:', error);\n      throw error;\n    }\n    console.log('Dados retornados do Supabase:', data); // Para debug\n    return data;\n  },\n  async addAudio(audio) {\n    console.log('Tentando adicionar áudio com dados:', audio);\n    const {\n      data,\n      error\n    } = await supabase.from('audios').insert([{\n      title: audio.title,\n      url: audio.url,\n      auto_repeat: false,\n      repeat_interval: 0,\n      play_count: 0\n    }]).select().single();\n    if (error) {\n      console.error('Erro ao adicionar áudio:', error);\n      throw error;\n    }\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n    return data;\n  },\n  async deleteAudio(id) {\n    const {\n      error\n    } = await supabase.from('audios').delete().eq('id', id);\n    if (error) throw error;\n  },\n  updateAudio: async (id, updates) => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(updates).eq('id', id).select().single();\n    if (error) throw error;\n    return data;\n  },\n  updatePreferences: async (audioId, preferences) => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').update(preferences).eq('id', audioId).select().single();\n    if (error) throw error;\n    return data;\n  },\n  loadPreferences: async audioId => {\n    const {\n      data,\n      error\n    } = await supabase.from('audios').select('auto_repeat, repeat_interval, last_played_at, play_count, timer_end_at').eq('id', audioId).single();\n    if (error) throw error;\n    return data;\n  }\n};\nexport const videoService = {\n  async getRecentVideos() {\n    const {\n      data,\n      error\n    } = await supabase.from('videos').select('*').order('created_at', {\n      ascending: false\n    }).limit(20);\n    if (error) {\n      console.error('Erro ao buscar vídeos:', error);\n      throw new Error(`Erro ao buscar vídeos: ${error.message}`);\n    }\n    console.log('Vídeos carregados:', data);\n    return data;\n  },\n  async addVideo(url, title) {\n    if (!url) {\n      throw new Error('URL não pode estar vazia');\n    }\n    console.log('Tentando adicionar vídeo:', {\n      url,\n      title\n    });\n    const {\n      data,\n      error\n    } = await supabase.from('videos').insert([{\n      url,\n      title\n    }]).select().single();\n    if (error) {\n      console.error('Erro detalhado do Supabase:', error);\n      throw new Error(error.message || 'Erro ao adicionar vídeo no banco de dados');\n    }\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n    console.log('Vídeo adicionado com sucesso:', data);\n    return data;\n  },\n  async deleteVideo(id) {\n    const {\n      error\n    } = await supabase.from('videos').delete().eq('id', id);\n    if (error) {\n      throw new Error(`Erro ao deletar vídeo: ${error.message}`);\n    }\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","audioService","getAudios","data","error","from","select","order","ascending","console","log","addAudio","audio","insert","title","url","auto_repeat","repeat_interval","play_count","single","deleteAudio","id","delete","eq","updateAudio","updates","update","updatePreferences","audioId","preferences","loadPreferences","videoService","getRecentVideos","limit","message","addVideo","deleteVideo"],"sources":["C:/Users/genil/Desktop/Dev Sistema academia/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Faltam variáveis de ambiente do Supabase');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport interface AudioData {\n  id: string;\n  title: string;\n  url: string;\n  created_at: string;\n  auto_repeat: boolean;\n  repeat_interval: number;\n  last_played_at?: string;\n  play_count?: number;\n  timer_end_at?: string;\n}\n\nexport interface VideoData {\n  id: string;\n  url: string;\n  title?: string;\n  created_at: string;\n}\n\nexport const audioService = {\n  async getAudios() {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('*')\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Erro ao buscar áudios:', error);\n      throw error;\n    }\n\n    console.log('Dados retornados do Supabase:', data); // Para debug\n    return data as AudioData[];\n  },\n\n  async addAudio(audio: Omit<AudioData, 'id' | 'created_at'>) {\n    console.log('Tentando adicionar áudio com dados:', audio);\n    \n    const { data, error } = await supabase\n      .from('audios')\n      .insert([{\n        title: audio.title,\n        url: audio.url,\n        auto_repeat: false,\n        repeat_interval: 0,\n        play_count: 0\n      }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Erro ao adicionar áudio:', error);\n      throw error;\n    }\n\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n\n    return data as AudioData;\n  },\n\n  async deleteAudio(id: string) {\n    const { error } = await supabase\n      .from('audios')\n      .delete()\n      .eq('id', id);\n    \n    if (error) throw error;\n  },\n\n  updateAudio: async (id: string, updates: Partial<AudioData>) => {\n    const { data, error } = await supabase\n      .from('audios')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as AudioData;\n  },\n\n  updatePreferences: async (audioId: string, preferences: {\n    auto_repeat?: boolean;\n    repeat_interval?: number;\n    last_played_at?: string;\n    play_count?: number;\n    timer_end_at?: string;\n  }) => {\n    const { data, error } = await supabase\n      .from('audios')\n      .update(preferences)\n      .eq('id', audioId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as AudioData;\n  },\n\n  loadPreferences: async (audioId: string) => {\n    const { data, error } = await supabase\n      .from('audios')\n      .select('auto_repeat, repeat_interval, last_played_at, play_count, timer_end_at')\n      .eq('id', audioId)\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n};\n\nexport const videoService = {\n  async getRecentVideos() {\n    const { data, error } = await supabase\n      .from('videos')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .limit(20);\n    \n    if (error) {\n      console.error('Erro ao buscar vídeos:', error);\n      throw new Error(`Erro ao buscar vídeos: ${error.message}`);\n    }\n    console.log('Vídeos carregados:', data);\n    return data as VideoData[];\n  },\n\n  async addVideo(url: string, title: string) {\n    if (!url) {\n      throw new Error('URL não pode estar vazia');\n    }\n\n    console.log('Tentando adicionar vídeo:', { url, title });\n    \n    const { data, error } = await supabase\n      .from('videos')\n      .insert([{ url, title }])\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Erro detalhado do Supabase:', error);\n      throw new Error(\n        error.message || \n        'Erro ao adicionar vídeo no banco de dados'\n      );\n    }\n\n    if (!data) {\n      throw new Error('Nenhum dado retornado após inserção');\n    }\n\n    console.log('Vídeo adicionado com sucesso:', data);\n    return data as VideoData;\n  },\n\n  async deleteVideo(id: string) {\n    const { error } = await supabase\n      .from('videos')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      throw new Error(`Erro ao deletar vídeo: ${error.message}`);\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}